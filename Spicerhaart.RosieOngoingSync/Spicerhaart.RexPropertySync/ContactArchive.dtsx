<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/26/2018 4:42:07 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="79000ITD10"
  DTS:CreatorName="SPICERHAART\1901434"
  DTS:DTSID="{5A52AC75-6BA5-4FB0-9C85-A68AFE674EAD}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:FailParentOnFailure="True"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="2057"
  DTS:ObjectName="ContactArchive"
  DTS:PackageType="5"
  DTS:ProtectionLevel="2"
  DTS:VersionBuild="1167"
  DTS:VersionGUID="{9280E1E0-794E-47A7-B9E2-B1EE0FE71299}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[colsqlbi01v.Entities]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{AA5B5E2C-C73F-4460-A879-0B56143F3DC4}"
      DTS:ObjectName="colsqlbi01v.Entities">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=colsqlbi01v;User ID=wh_user;Initial Catalog=Entities;Provider=SQLNCLI11.1;Auto Translate=False;">
          <EncryptedData
            Type="http://www.w3.org/2001/04/xmlenc#Element"
            Salt="JKw+sBcr+A=="
            IV="QOWbYLjFSeo=" xmlns="http://www.w3.org/2001/04/xmlenc#">
            <EncryptionMethod
              Algorithm="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" />
            <CipherData>
              <CipherValue>QOWbYLjFSepAU0R0lwo2yt5EybaCm0iYs+RNWWM/ioc2MUavEAWu2KMi5nO5aVNwz1sD8uAe76pQIYUqk9w8qKgfth/k85okkdFXrz7bWaCFNBIfm+zMlfhM164FQp6YncD5k8Eij9kz6FPG47U1OKkL2sM5uCFG</CipherValue>
            </CipherData>
          </EncryptedData>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[COLSQLBI01v.Metrics]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{40306DC5-4DE8-475C-B508-3FB115037325}"
      DTS:ObjectName="COLSQLBI01v.Metrics">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=COLSQLBI01v;Initial Catalog=Metrics;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[COLSQLBI01V.RosieWorkBench]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{A2FE79C6-F6CD-4A84-B790-2F7D9010EEBE}"
      DTS:ObjectName="COLSQLBI01V.RosieWorkBench">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=COLSQLBI01V;Initial Catalog=RosieWorkBench;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[HTTP 1]"
      DTS:CreationName="ZS-HTTP"
      DTS:DTSID="{0325E913-EEBD-46E4-AE03-64DB07ADBB4F}"
      DTS:ObjectName="HTTP 1">
      <DTS:ObjectData>
        <ConnectionManager
          ConnectionString="Url=https://api.rexsoftware.com/rex.php;CredentialType=Notset;UserName=;Timeout=100000;SoapWssPasswordType=Notset;JwtCustomClaims=;RetainCookies=False;UseProxy=False;ProxyUrl=;UseProxyCreds=False;ProxyUserName=;DoNotUseDefaultProxy=False;UseClientCertificate=False;CertificatePath=;CertificateStorageType=CurrentUser;CertificateStoreName=My;CertificateThumbprint=;RetryMode=None;RetryCountMax=3;RetryWaitTimeMs=2000;RetryMultiplyWaitTime=False;RetryMessageList=;RetryStatusCodeList=;AuthScheme=Bearer;TokenAuthHeader=;TokenUrl=;TokenRequestData=;TokenRequestHeaders=Accept:*/*||Cache-Control:no-cache;TokenRequestMethod=;TokenRequestContentType=Default;TokenRequestIsMultiPart=False;TokenResponseContentFilter=;TokenResponseValueExtractMode=Body;TokenResponseCookie=;TokenResponseHeader=;TokenResponseContentType=None;TokenExpirationTimeInSeconds=3600;EnableRequestHashing=False;HashAlgorithm=sha256;HashSignatureFormat=;HashSignatureFormatForLogin=;ExtraHeaders=;ExtraHeadersForLogin=;HashTimestampFormat=;HashTreatSecretAsNonBase64=False;HashSignWithApiKey=False;RetainSameConnection=False" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[RexSync.xml]"
      DTS:CreationName="FILE"
      DTS:DTSID="{1B8B2A3A-0640-48A6-BD0C-C18168648008}"
      DTS:ObjectName="RexSync.xml">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="C:\SSISVariables\RexSync.xml" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP]"
      DTS:CreationName="ZS-SMTP"
      DTS:DTSID="{C349C6E6-7BD0-45C2-BD3D-02020A6E844D}"
      DTS:ObjectName="SMTP">
      <DTS:ObjectData>
        <ConnectionManager
          ConnectionString="SmtpServer=outlookcol;UserName=;Port=25;EnableSsl=False;Timeout=10000;EnableAnonymousAuth=False" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP Connection Manager]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{4FA71D68-056B-4BEF-8EA0-71A657178E0A}"
      DTS:ObjectName="SMTP Connection Manager">
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=outlookcol;UseWindowsAuthentication=False;EnableSsl=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{3741D993-15E3-4980-9639-E6DF941D3E9D}"
      DTS:ObjectName="ContactArchiveDays">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">7</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{29EC4C00-79A6-4A01-9D64-5CBC8D57F948}"
      DTS:ObjectName="InputOfficeId">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">1132</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{58773795-0DFF-4510-8793-CB2127F05556}"
      DTS:ObjectName="Mode">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Preview</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6DF2FC01-2FCA-4442-9956-D0C1F6DEA592}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="APIErrorResp">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{692620D9-A7E0-47F8-900E-352AAAB4ACCD}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CampaignId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8002E11D-979C-4BA8-AB2E-EE893FF29C92}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CampaignMemberStatusId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{15478335-F2D1-401C-A4F0-B50A0BEFF05D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ListingServiceID">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{320B659B-647D-4412-A65C-317067F8DA31}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="OfficeList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{29C68BF8-35B3-4D6C-B52E-0418237C6178}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Office_id">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{51CD1005-241C-473F-9C47-B5CB59442825}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackageErrorEmail">
      <DTS:VariableValue
        DTS:DataType="8">keith.mills@spicerhaart.co.uk</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0F05792B-414F-4C10-8679-F2CC6517BBA3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackageExecutionInfo">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D5C25597-AFCE-40F5-95DE-1E1145B1EA55}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackagePassword">
      <DTS:VariableValue
        DTS:DataType="8">P4ssword</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B80970FC-208E-4584-94AE-7482C0F5B20B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackageStartDate">
      <DTS:VariableValue
        DTS:DataType="7">1/1/2020</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9D6EA95A-EA27-4B71-A912-A8C3891AF9DC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="PackageStartForNextRun">
      <DTS:VariableValue
        DTS:DataType="7">1/1/2020</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{063E84CD-CF00-4C76-9BF8-2F416E794DD5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackageUser">
      <DTS:VariableValue
        DTS:DataType="8">1897047@spicerhaart.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A7D23083-A9F5-46FF-9770-5935324B5DD3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessingStart">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BE2C3C94-5EB0-411E-9D16-4C4643FDB04B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PropertyCategory">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A325B063-6FE0-444D-B198-B977A1541DB1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Record_id">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{650EBE1E-DC1F-4F7F-ABA7-1E59DA692844}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ResponseAuth">
      <DTS:VariableValue
        DTS:DataType="8">{ 	"result": { 		"metric": "K006", 		"time": 1574501564, 		"recorded_at": 1574501564, 		"value": 1, 		"recorded_by_user": { 			"id": "25918", 			"_name": "Shannay Jarvis", 			"_first_name": "Shannay", 			"_last_name": "Jarvis", 			"_email_address": "Shannay.Jarvis@haart.co.uk" 		}, 		"labels": [ 			{ 				"label": "service_name", 				"value": "CalendarEvents" 			}, 			{ 				"label": "record_id", 				"value": "32f81cc2-0dd4-11ea-b8c1-5adf458c5229" 			} 		], 		"user_attributions": [ 			{ 				"percentage": 100, 				"user": { 					"id": "25918", 					"_name": "Shannay Jarvis", 					"_first_name": "Shannay", 					"_last_name": "Jarvis", 					"_email_address": "Shannay.Jarvis@haart.co.uk" 				} 			} 		], 		"_id": 698037 	}, 	"error": null }</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30F29A82-EC7F-4CCD-9CC4-305B7BE355EC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ResponseAuthCode">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{354D1EFB-82E3-429A-AE25-A8E9A60FBDAE}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RexAccountID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{483415BF-7411-4A05-82F1-0AB8CF690634}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RexAPIWebURL">
      <DTS:VariableValue
        DTS:DataType="8">https://api.uk.rexsoftware.com/rex.php</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{40734238-65F0-4A5B-B96B-3DDA1793D5D7}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RexAPIWebURLv1">
      <DTS:VariableValue
        DTS:DataType="8">https://beta-api.uk.rexsoftware.com/v1/</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{216A53BE-9ADF-4D14-8CFE-B640B4D7FC40}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RexToken">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{675A2E7A-197E-4502-A564-DE6D3B6A6981}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RosieUserID">
      <DTS:VariableValue
        DTS:DataType="3">18382</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6F8AB1DD-2CB1-47B5-ABE5-C843C2C67C31}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServiceName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5F4C4647-D87D-46F6-9DB1-CE6813F77A66}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="DATEDIFF(&quot;S&quot;, (DT_DBTIMESTAMP)&quot;1970-01-01&quot;, (DT_DBTIMESTAMP)&quot;2018-09-01&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="system_ctime">
      <DTS:VariableValue
        DTS:DataType="3">1535760000</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{813AB63B-7E09-4C4C-BE02-EC9AD24A5391}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="UpsertedCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0ADB4B2C-FD88-4C2F-B15E-80783FE0612E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Variable">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Get Office List"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{5B2249A8-7FAF-421D-AE64-70E37FFD998C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get Office List"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{AA5B5E2C-C73F-4460-A879-0B56143F3DC4}"
          SQLTask:BypassPrepare="False"
          SQLTask:SqlStatementSource="SELECT [office_id],  [account_id], &#xA;       [org_id], &#xA;       [office_name]&#xA;FROM [RosieWorkBench].[dbo].[vwAccount]&#xA;WHERE migrated = 1 and [office_name] not like '%test%' "
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::OfficeList" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::InputOfficeId"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Iterate Offices"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{2E2604C9-7E79-4704-9F1D-399C070CA76D}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Iterate Offices">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{9056AE65-05C8-4160-AE21-0D07941B44BB}"
        DTS:ObjectName="{A7CC5C17-CF0B-4BFC-AD97-DC80FF43AE29}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::OfficeList" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Iterate Offices\Sequence Container"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{9A745556-08C8-49A8-9861-40EA5364762E}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Sequence Container">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:Description="Data Flow Task"
              DTS:Disabled="True"
              DTS:DTSID="{8122A8ED-247D-4324-969C-71697A589731}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:ObjectName="Add note based on SQL log"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Template Transform; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="Template transform allows to produce multi line string from template text. You can insert placeholders anywhere in the string. Ideal use case would be produce simple XML or JSON without use of JSON or XML Generator Transform."
                      name="Build Note JSON"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="Template text which needs to be replaced. Any where in the text you can use input column names as placeholders (e.g. &lt;%CustomerEmail%&gt; ). You can also use user/system variable as placeholder (e.g. {{User::MyVariable}} )"
                          expressionType="Notify"
                          name="TemplateText"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">        "&lt;%Id%&gt;":		{
    "method": "Notes::create",
    "args": {
        "data": {
            "note": "&lt;%ContactNote%&gt;",
            "note_type_id": "note",
             "system_created_user": {
                "id": 11111122
            },
            "_related": {
                "note_contacts": [
                    {
                        "contact_id": &lt;%EntityId%&gt;
                    }
                ]
            }
        }
    }
}

</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TemplateTransform</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Inputs[TemplateTransformInput]"
                          name="TemplateTransformInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Inputs[TemplateTransformInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Inputs[TemplateTransformInput].Columns[ContactNote]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="ContactNote"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Output].Columns[ContactNote]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Inputs[TemplateTransformInput].Columns[EntityId]"
                              cachedDataType="i4"
                              cachedName="EntityId"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityId]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput]"
                          errorOrTruncationOperation="Error"
                          name="TemplateTransformOutput"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Inputs[TemplateTransformInput]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput].Columns[TemplateOutput]"
                              dataType="nText"
                              description="Template output column which will contain replaced text."
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Build note text"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Inputs[Derived Column Input].Columns[Action]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Action"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Action]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Output].Columns[ContactNote]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Output].Columns[ContactNote]"
                              name="ContactNote"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">#{Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Action]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">Action</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion"
                      componentClassID="Microsoft.DataConvert"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Inputs[Data Conversion Input].Columns[ContactNote]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="ContactNote"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[ContactNote]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Inputs[Data Conversion Input].Columns[EntityType]"
                              cachedDataType="wstr"
                              cachedLength="7"
                              cachedName="EntityType"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Output].Columns[EntityType]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ContactNote]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ContactNote]"
                              name="Copy of ContactNote"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[ContactNote]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Derived Column.EntityType]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Derived Column.EntityType]"
                              name="Copy of Derived Column.EntityType"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Output].Columns[EntityType]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Derived Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Output].Columns[EntityType]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="7"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Output].Columns[EntityType]"
                              name="EntityType"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">"Contact"</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">"Contact"</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check"
                      componentClassID="Microsoft.ConditionalSplit"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Error Message Check"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Inputs[Conditional Split Input].Columns[P_error]"
                              cachedDataType="wstr"
                              cachedLength="1020"
                              cachedName="P_error"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[P_error]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Fail]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="RedirectRow"
                          exclusionGroup="1"
                          name="Fail"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Inputs[Conditional Split Input]"
                          truncationRowDisposition="RedirectRow">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">[ISNULL](#{Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[P_error]}) ==  FALSE </property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">ISNULL(P_error) ==  FALSE </property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Default Output]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="Conditional Split Default Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="JSON Parser Transform; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="Parse incoming JSON String into columns. You can also parse and transform single JSON record into multiple rows by filtering data based on JSON Path (e.g. $.Customer.Orders[*])"
                      name="Extract contact id"
                      usesDispositions="true"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for any numeric data types"
                          expressionType="Notify"
                          name="TreatBlankNumberAsNull">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for bool data types"
                          expressionType="Notify"
                          name="TreatBlankBoolAsNull">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for any date/time data types"
                          expressionType="Notify"
                          name="TreatBlankDateAsNull">true</property>
                        <property
                          dataType="System.Int32"
                          description="Encoding of source file"
                          expressionType="Notify"
                          name="Encoding"
                          typeConverter="ZappySys.Common.EncodingType">0</property>
                        <property
                          dataType="System.String"
                          description="Character set for text (e.g. utf-8 )"
                          expressionType="Notify"
                          name="CharacterSet"></property>
                        <property
                          dataType="System.String"
                          description="Sample JSON data used to parse output columns."
                          expressionType="Notify"
                          name="SampleData"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">[
					{
						"id": "3483071",
						"contact": {
							"system_record_state": "archived",
							"system_ctime": "1581614962",
							"system_modtime": "1619719430",
							"name": "J Gill",
							"email_address": "james.gill@spicerhaart.co.uk",
							"phone_number": "07503 734106",
							"fax_number": null,
							"is_dnd": null,
							"type": "person",
							"last_contacted_date": "2021-02-09",
							"name_last": "Gill",
							"address_postal": null,
							"address": "Colwyn House\r\nSheepen Place\r\nCOLCHESTER\r\nCO3 3LD",
							"interest_level": null,
							"marketing_birthday": null,
							"marketing_enquiry_source": null,
							"marketing_gender": null,
							"marketing_postcode": null,
							"name_legal": null,
							"name_salutation": null,
							"name_addressee": null,
							"system_owner_user": {
								"id": "21562",
								"name": "James Gill",
								"first_name": "James",
								"last_name": "Gill",
								"email_address": "james.gill@spicerhaart.co.uk"
							},
							"contact_image": null,
							"marketing_enquiry_method": null,
							"etag": "1342554-1619719430",
							"id": "1342554"
						}
					}
				]</property>
                        <property
                          dataType="System.Boolean"
                          description="Include all upstream parent columns into output except the one you selected to parse. By default only parsed columns from Input document is included in the output. If you wish to include all other upstream columns in the output too then check this option."
                          expressionType="Notify"
                          name="OutputAllUpstreamColumns">true</property>
                        <property
                          dataType="System.Int32"
                          description="Defines how to handle empty input. By default NULL or Empty input is skipped from parsing."
                          expressionType="Notify"
                          name="EmptyInputProcessingMode"
                          typeConverter="ZappySys.Common.Data.EmptyInputProcessingMode">0</property>
                        <property
                          dataType="System.String"
                          description="Defines how to handle empty input. By default NULL or Empty input is skipped from parsing."
                          expressionType="Notify"
                          name="TreatEmptyInputAs">{ }</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum JSON records to fetch. Set this value to 0 for all records"
                          expressionType="Notify"
                          name="MaxRows">0</property>
                        <property
                          dataType="System.String"
                          description="Enter expression here to filter data.(Example:  $.Users[*].UserName ) This will fetch User names from users records"
                          expressionType="Notify"
                          name="Filter"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Boolean"
                          description="Use this option to include parent properties (Non array) in the output along with Filtered Rows"
                          expressionType="Notify"
                          name="IncludeParentColumns">true</property>
                        <property
                          dataType="System.Boolean"
                          description="By default child and parent information is not included in the output if children not found for specified expression. For example if you want to extract all orders from all customers nodes then you can type $.Customers[*].Orders[*]. This will fetch all orders from all customers. By default customers records without orders wont be included in the output. If you want to include those customers where orders not found then check this option (Output null information for order attributes). This behavior is similar to LEFT OUTER JOIN in SQL (Left side is parent, right side is child). This option is ***resource intensive*** so only check if you really care about this behavior."
                          expressionType="Notify"
                          name="IncludeParentColumnsWhenChildMissing">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Set this option to true if you want to output parent columns which are array. By default any parent column which is an array is not included in output. See also FilterForParentColumnsWithArrayType property if you set this property"
                          expressionType="Notify"
                          name="IncludeParentColumnsWithArrayType">false</property>
                        <property
                          dataType="System.String"
                          description="Filter expression to extract value form parent"
                          expressionType="Notify"
                          name="FilterForParentColumnsWithArrayType"></property>
                        <property
                          dataType="System.String"
                          description="Prefix for parent column name. This option is only valid if you have set IncludeParentColumns=True"
                          expressionType="Notify"
                          name="ParentColumnPrefix">P_</property>
                        <property
                          dataType="System.Boolean"
                          description="Throw error if property name specified in filter expression is missing. By default it will ignore any missing property errors."
                          expressionType="Notify"
                          name="ThrowErrorIfPropertyMissing">false</property>
                        <property
                          dataType="System.Int32"
                          description="This property how many nested levels should be scanned to fetch various properties. 0=Scan all child levels."
                          expressionType="Notify"
                          name="MaxLevelsToScan">0</property>
                        <property
                          dataType="System.String"
                          description="List comma separated property names from JSON document which you want to exclude from output. Specify parent property name to exclude all child nodes."
                          expressionType="Notify"
                          name="ExcludedProperties"></property>
                        <property
                          dataType="System.String"
                          description="Property level separator used in generated property name (separator for outer properties - Above selected filter node). Use this if default separator is producing duplicate property name which is conflicting with existing name."
                          expressionType="Notify"
                          name="LevelSeparator">_</property>
                        <property
                          dataType="System.Boolean"
                          description="Enables deep array flattening for selected filtered hierarchy. When you turn on this property it will flatten each property of each array item and expose as column (e.g. If you have Filter set as $.customers[*] and for each customer you have an array of Addresses then you may see output columns like Addresses.1.City, Addresses.1.State, Addresses.2.City, Addresses.2.State .... Addresses.N.City, Addresses.N.State). You can control how many array items you want to flatten by setting MaxArrayItemsToFlatten property."
                          expressionType="Notify"
                          name="EnableArrayFlattening">false</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum number of array items to flatten. inner array flattening. Adjust this property to control how many columns being generated. This option is ignored if you set EnableArrayFlattening=false"
                          expressionType="Notify"
                          name="MaxArrayItemsToFlatten">10</property>
                        <property
                          dataType="System.String"
                          description="Specifies how custom date formatted strings are parsed when reading JSON."
                          expressionType="Notify"
                          name="DateFormatString"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies how date formatted strings, e.g. Date(1198908717056) and 2012-03-21T05:40Z, are parsed when reading JSON."
                          expressionType="Notify"
                          name="DateParseHandling"
                          typeConverter="ZappySys.Common.DateParseHandling">1</property>
                        <property
                          dataType="System.Boolean"
                          description="Indent JSON output so its easy to read."
                          expressionType="Notify"
                          name="IndentOutput">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Output as raw JSON document rather than parsing individual fields. This option is helpful if you have documents stored in a file and you want to pass them downstream as raw JSON string rather than parsing into columns."
                          expressionType="Notify"
                          name="OutputRawDocument">false</property>
                        <property
                          dataType="System.Boolean"
                          description="When this property is true then Column is converted to Row. Pivoted names will appear under  Pivot_Name column and values will appear under Pivot_Value field."
                          expressionType="Notify"
                          name="EnablePivot">false</property>
                        <property
                          dataType="System.Int32"
                          description="Array Transformation you want to apply. Useful for case when you have 2-Dimensional arrays with rows/columns in separate arrays."
                          expressionType="Notify"
                          name="ArrayTransformationType"
                          typeConverter="ZappySys.Json.ArrayTransformType">0</property>
                        <property
                          dataType="System.String"
                          description="Filter expression to use to extract column names for array transformation."
                          expressionType="Notify"
                          name="ArrayTransColumnNameFilter"></property>
                        <property
                          dataType="System.String"
                          description="Filter expression for row values (Not applicable for simple array transformation)."
                          expressionType="Notify"
                          name="ArrayTransRowValueFilter"></property>
                        <property
                          dataType="System.Boolean"
                          description="When you have 2D array but don't have column list specified in a separate array then use this option (e.g. { arr: [[10,11],[21,22]] } ). If you selected Column less array or JSON Lines option then this property means Column Names coming from First Line of array."
                          expressionType="Notify"
                          name="ArrayTransEnableCustomColumns">false</property>
                        <property
                          dataType="System.String"
                          description="When you have 2D array but don't have column list specified in a separate array then use specify column names here. Use comma separated list (e.g col1,col2,col3 ). Column name Order must match value order."
                          expressionType="Notify"
                          name="ArrayTransCustomColumns"></property>
                        <property
                          dataType="System.Int32"
                          description="Metadata scan mode controls how data type and length is determined. By default few records scanned to determine datatype/length. Changing ScanMode affects length/datatype accuracy."
                          expressionType="Notify"
                          name="MetaDataScanMode"
                          typeConverter="ZappySys.Common.Data.MetaDataScanMode">4</property>
                        <property
                          dataType="System.Int32"
                          description="Length for all string column. This option is only valid for MetaDataScanMode=Custom"
                          expressionType="Notify"
                          name="MetaDataCustomLength">1000</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.JsonParserTransform</property>
                        <property
                          dataType="System.Boolean"
                          name="EnableBigNumberHandling">false</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput]"
                          errorRowDisposition="FailComponent"
                          name="JsonParserTransformInput"
                          truncationRowDisposition="FailComponent">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.related.note_contacts]"
                              cachedDataType="nText"
                              cachedName="Pivot_Value.related.note_contacts"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.related.note_contacts]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[StatusCode]"
                              cachedDataType="i4"
                              cachedName="StatusCode"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[StatusCode]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[TemplateOutput]"
                              cachedDataType="nText"
                              cachedName="TemplateOutput"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[ContactNote]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="ContactNote"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[ContactNote]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[ContactNote]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Action]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Action"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Action]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Action]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[EntityType]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="EntityType"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityType]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[EntityType]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[EntityId]"
                              cachedDataType="i4"
                              cachedName="EntityId"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityId]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[EntityId]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Id]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Name]"
                              cachedDataType="wstr"
                              cachedLength="4"
                              cachedName="Pivot_Name"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.id]"
                              cachedDataType="i8"
                              cachedName="Pivot_Value.id"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.note_type.id]"
                              cachedDataType="wstr"
                              cachedLength="16"
                              cachedName="Pivot_Value.note_type.id"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.note_type.id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.note_type.id]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.etag]"
                              cachedDataType="wstr"
                              cachedLength="76"
                              cachedName="Pivot_Value.etag"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.etag]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.etag]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[P_error]"
                              cachedDataType="wstr"
                              cachedLength="1020"
                              cachedName="P_error"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[P_error]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[P_error]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True" />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput]"
                          errorOrTruncationOperation="Error"
                          errorRowDisposition="FailComponent"
                          name="JsonParserTransformOutput"
                          truncationRowDisposition="FailComponent">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[P_error]"
                              dataType="wstr"
                              length="1020"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[P_error]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[P_error]"
                              name="P_error" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.etag]"
                              dataType="wstr"
                              length="76"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.etag]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.etag]"
                              name="Pivot_Value.etag" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.note_type.id]"
                              dataType="wstr"
                              length="16"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.note_type.id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.note_type.id]"
                              name="Pivot_Value.note_type.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]"
                              dataType="i8"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Value.id]"
                              name="Pivot_Value.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]"
                              dataType="wstr"
                              length="4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Pivot_Name]"
                              name="Pivot_Name" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[EntityId]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[EntityId]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[EntityId]"
                              name="EntityId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[EntityType]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[EntityType]"
                              name="EntityType" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Action]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[Action]"
                              name="Action" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[ContactNote]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[ContactNote]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[ContactNote]"
                              name="ContactNote" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              dataType="nText"
                              description="Template output column which will contain replaced text."
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput].Columns[StatusCode]"
                              name="StatusCode" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[contact.id]"
                              dataType="wstr"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.id]"
                              length="28"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[contact.id]"
                              name="contact.id" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[id]"
                              dataType="wstr"
                              length="28"
                              name="id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_record_state]"
                              dataType="wstr"
                              length="32"
                              name="contact.system_record_state" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_ctime]"
                              dataType="wstr"
                              length="40"
                              name="contact.system_ctime" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_modtime]"
                              dataType="wstr"
                              length="40"
                              name="contact.system_modtime" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.name]"
                              dataType="wstr"
                              length="24"
                              name="contact.name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.email_address]"
                              dataType="wstr"
                              length="112"
                              name="contact.email_address" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.phone_number]"
                              dataType="wstr"
                              length="48"
                              name="contact.phone_number" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.fax_number]"
                              dataType="wstr"
                              length="1020"
                              name="contact.fax_number" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.is_dnd]"
                              dataType="wstr"
                              length="1020"
                              name="contact.is_dnd" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.type]"
                              dataType="wstr"
                              length="24"
                              name="contact.type" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.last_contacted_date]"
                              dataType="wstr"
                              length="40"
                              name="contact.last_contacted_date" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.name_last]"
                              dataType="wstr"
                              length="16"
                              name="contact.name_last" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.address_postal]"
                              dataType="wstr"
                              length="1020"
                              name="contact.address_postal" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.address]"
                              dataType="wstr"
                              length="192"
                              name="contact.address" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.interest_level]"
                              dataType="wstr"
                              length="1020"
                              name="contact.interest_level" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.marketing_birthday]"
                              dataType="wstr"
                              length="1020"
                              name="contact.marketing_birthday" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.marketing_enquiry_source]"
                              dataType="wstr"
                              length="1020"
                              name="contact.marketing_enquiry_source" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.marketing_gender]"
                              dataType="wstr"
                              length="1020"
                              name="contact.marketing_gender" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.marketing_postcode]"
                              dataType="wstr"
                              length="1020"
                              name="contact.marketing_postcode" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.name_legal]"
                              dataType="wstr"
                              length="1020"
                              name="contact.name_legal" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.name_salutation]"
                              dataType="wstr"
                              length="1020"
                              name="contact.name_salutation" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.name_addressee]"
                              dataType="wstr"
                              length="1020"
                              name="contact.name_addressee" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_owner_user.id]"
                              dataType="wstr"
                              length="20"
                              name="contact.system_owner_user.id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_owner_user.name]"
                              dataType="wstr"
                              length="40"
                              name="contact.system_owner_user.name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_owner_user.first_name]"
                              dataType="wstr"
                              length="20"
                              name="contact.system_owner_user.first_name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_owner_user.last_name]"
                              dataType="wstr"
                              length="16"
                              name="contact.system_owner_user.last_name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.system_owner_user.email_address]"
                              dataType="wstr"
                              length="112"
                              name="contact.system_owner_user.email_address" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.contact_image]"
                              dataType="wstr"
                              length="1020"
                              name="contact.contact_image" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.marketing_enquiry_method]"
                              dataType="wstr"
                              length="1020"
                              name="contact.marketing_enquiry_method" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.etag]"
                              dataType="wstr"
                              length="72"
                              name="contact.etag" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].ExternalColumns[contact.id]"
                              dataType="wstr"
                              length="28"
                              name="contact.id" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output]"
                          isErrorOut="true"
                          name="JsonParserTransform Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[P_error]"
                              dataType="wstr"
                              length="1020"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[P_error]"
                              name="P_error" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.etag]"
                              dataType="wstr"
                              length="76"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.etag]"
                              name="Pivot_Value.etag" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.note_type.id]"
                              dataType="wstr"
                              length="16"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.note_type.id]"
                              name="Pivot_Value.note_type.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.id]"
                              dataType="i8"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.id]"
                              name="Pivot_Value.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Name]"
                              dataType="wstr"
                              length="4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Pivot_Name]"
                              name="Pivot_Name" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[EntityId]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[EntityId]"
                              name="EntityId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[EntityType]"
                              name="EntityType" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[Action]"
                              name="Action" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ContactNote]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ContactNote]"
                              name="ContactNote" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[StatusCode]"
                              name="StatusCode" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[contact.id]"
                              dataType="wstr"
                              length="28"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[contact.id]"
                              name="contact.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="128"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]"
                              name="ErrorColumnName" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]"
                              dataType="wstr"
                              length="1024"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]"
                              name="ErrorMessage" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]"
                              name="ErrorRawData" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL"
                      componentClassID="Microsoft.OLEDBSource"
                      contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                      description="OLE DB Source"
                      name="Get Rosie Loaded Contacts from SQL"
                      usesDispositions="true"
                      version="7">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[dbo].[vwContacts]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">SELECT AT.[Id], 
       AT.[EntityId], 
       AT.[EntityType], 
       AT.[Action]
FROM [Entities].[dbo].[AutoTasks] at
     INNER JOIN [dbo].[Contacts] c ON AT.[EntityId] = C.ID
     LEFT JOIN [Entities].[dbo].[AutoTasks] at2 ON AT.[Id] = at2.[AutoTaskParentId]
WHERE at.[Action] = 'Contact Archived'
      AND at2.[AutoTaskParentId] IS NULL
	  AND at.NoteId IS NULL
AND c.AccountId = ?</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">2</property>
                        <property
                          dataType="System.String"
                          description="The mappings between the parameters in the SQL command and variables."
                          name="ParameterMapping">"Parameter0:Input",{354D1EFB-82E3-429A-AE25-A8E9A60FBDAE};</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          connectionManagerRefId="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output]"
                          name="OLE DB Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Id]"
                              dataType="i4"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[Id]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Id]"
                              name="Id"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityId]"
                              dataType="i4"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[EntityId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityId]"
                              name="EntityId"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[EntityType]"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityType]"
                              name="EntityType"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[Action]"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Action]"
                              name="Action"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[Id]"
                              dataType="i4"
                              name="Id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[EntityId]"
                              dataType="i4"
                              name="EntityId" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="EntityType" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].ExternalColumns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="Action" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output]"
                          isErrorOut="true"
                          name="OLE DB Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[EntityId]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[EntityId]"
                              name="EntityId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[EntityType]"
                              name="EntityType" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[Action]"
                              name="Action" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert Action Record"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[dbo].[AutoTasks]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          connectionManagerRefId="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].Columns[Pivot_Name]"
                              cachedDataType="wstr"
                              cachedLength="4"
                              cachedName="Pivot_Name"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[AutoTaskParentId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].Columns[Copy of ContactNote]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of ContactNote"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[Action]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ContactNote]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].Columns[Pivot_Value.id]"
                              cachedDataType="i8"
                              cachedName="Pivot_Value.id"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[NoteId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].Columns[contact.id]"
                              cachedDataType="wstr"
                              cachedLength="28"
                              cachedName="contact.id"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput].Columns[contact.id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].Columns[Copy of Derived Column.EntityType]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of Derived Column.EntityType"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityType]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Derived Column.EntityType]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[Id]"
                              dataType="i4"
                              name="Id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityId]"
                              dataType="i4"
                              name="EntityId" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="EntityType" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="Action" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[NoteId]"
                              dataType="i4"
                              name="NoteId" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[DateAdded]"
                              dataType="dbTimeStamp"
                              name="DateAdded" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[AutoTaskParentId]"
                              dataType="i4"
                              name="AutoTaskParentId" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Web API Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The Web API destination can be used to send data to Web API URL (e.g. Submit or POST data to REST API/SOAP or other HTTP/HTTPS endpoints)"
                      name="Post Batch Request"
                      usesDispositions="true"
                      version="5">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="API URL you want to access"
                          expressionType="Notify"
                          name="HttpRequestUrl">{{User::RexAPIWebURLv1}}rex/batch-requests/execute-with-transaction</property>
                        <property
                          dataType="System.String"
                          description="Http Web Request Method (e.g. POST, GET, PUT, LIST, DELETE...). Refer your API documentation if you are not sure which method you have to use."
                          expressionType="Notify"
                          name="HttpRequestMethod">POST</property>
                        <property
                          dataType="System.String"
                          description="Set this if you want to set custom Http headers. You may use variable anywhere in the header value using syntax {{User::YourVarName}}. Syntax of Header key value pair is : &amp;lt;request&amp;gt;&amp;lt;header&amp;gt;&amp;lt;name&amp;gt;x-myheader-1&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;AAA&amp;lt;/value&amp;gt;&amp;lt;/header&amp;gt; &amp;lt;header&amp;gt;&amp;lt;name&amp;gt;x-myheader-2&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;BBB&amp;lt;/value&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;/request&amp;gt;"
                          expressionType="Notify"
                          name="HttpHeaders"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">&lt;request&gt;&lt;header&gt;&lt;name&gt;Accept&lt;/name&gt;&lt;value&gt;*/*&lt;/value&gt;&lt;/header&gt;&lt;header&gt;&lt;name&gt;Cache-Control&lt;/name&gt;&lt;value&gt;no-cache&lt;/value&gt;&lt;/header&gt;&lt;header&gt;&lt;name&gt;Authorization&lt;/name&gt;&lt;value&gt;Bearer {{User::RexToken}}&lt;/value&gt;&lt;/header&gt;&lt;/request&gt;</property>
                        <property
                          dataType="System.String"
                          description="User defined data you wish to send along with your HTTP Request (e.g. Upload file data, Form POST data). Usually you have to set content-type of your data but if you select RequestMethod=POST then system will automatically set content-type=application/x-www-form-urlencoded."
                          expressionType="Notify"
                          name="HttpRequestData"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies content type for data you wish to POST. If you select Default option then system default content type will be used (i.e. application/x-www-form-urlencoded). If you specify Content-Type header along with this option then header value takes precedence."
                          expressionType="Notify"
                          name="HttpRequestContentType"
                          typeConverter="ZappySys.Common.Web.HttpRequestContentType">2</property>
                        <property
                          dataType="System.Boolean"
                          description="If this option is true then component will continue without exception on 404 error (Url not found). This allows you to consume data gracefully."
                          expressionType="Notify"
                          name="ContinueOnUrlNotFoundError">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Ignore SSL certificate related errors. Example: if you getting SSL/TLS errors because of certificate expired or certificate is not from trusted authority or certificate is self-signed. By checking this option you will not get SSL/TLS error."
                          expressionType="Notify"
                          name="IgnoreCertificateErrors">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Allow unsecure ciphers/suites and curves for SSLS/TLS communication. Use this option to communicate with web servers which needs legacy / unsecured ciphers support. This option is only trigged when you change default SSL/TLS Version on advanced settings tab."
                          expressionType="Notify"
                          name="AllowUnsecureSuite">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Enable support for gzip or deflate compression. When you check this option compressed response automatically de-compressed saving bandwidth. This option is only valid if web server supports compressed response stream. Check your API documentation for more information."
                          expressionType="Notify"
                          name="EnableCompressionSupport">true</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies which security protocol is supported for HTTPS communication. Using this option you can enable legacy protocol or enforce to use latest version of security protocol (Note: TLS 1.2 is only supported in SSIS 2014 or Higher)."
                          expressionType="Notify"
                          name="SecurityProtocol"
                          typeConverter="ZappySys.PowerPack.Common.HttpsSecurityProtocolType">0</property>
                        <property
                          dataType="System.Int32"
                          description="Wait time in milliseconds (Pause after each request). 0=No wait. Use this delay time if your API has limit on how many requests you can make in certain time frame."
                          expressionType="Notify"
                          name="WaitTime">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you redirect error to error output by default you get additional information in ErrorMessage column. Check this option if you need exact Response Body (Useful if its in JSON/XML format which needs to be parsed for additional information for later step)."
                          expressionType="Notify"
                          name="OnErrorOutputResponseBody">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Enable multiple requests using parallel threads."
                          expressionType="Notify"
                          name="EnableParallelRequests">false</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum parallel threads to use for processing multiple web requests."
                          expressionType="Notify"
                          name="MaxParallelThreads">20</property>
                        <property
                          dataType="System.Boolean"
                          description="By default one request is sent for each input row. If your API supports multiple records in a single call via HTTP Body then enable this setting. See also BodyBatchSize, BodyHeader, BodyFooter and BodyRowSeparator property."
                          expressionType="Notify"
                          name="EnableBodyBatch">true</property>
                        <property
                          dataType="System.String"
                          description="When you have to wrap input content between opening and closing tags for each call then set this property to specify opening for body content. For Example if you want to build Body like this (send max 100 rows per call) ==&gt; { records : [ {...}, {...}, {...} ] } then you can set BatchSize=100, BodyHeader as &quot;{ records: [&quot; , BodyFooter as &quot;] }&quot; and BodyRowSeperator as comma {,}. This property is ignored if EnableBodyBatch=false."
                          expressionType="Notify"
                          name="BodyHeader">{   "requests": {</property>
                        <property
                          dataType="System.String"
                          description="When you have to wrap input content between opening and closing tags for each call then set this property to specify closing for body content. For Example if you want to build Body like this (send max 100 rows per call) ==&gt; { records : [ {...}, {...}, {...} ] } then you can set BatchSize=100, BodyHeader as &quot;{ records: [&quot; , BodyFooter as &quot;] }&quot; and BodyRowSeperator as comma {,}. This property is ignored if EnableBodyBatch=false."
                          expressionType="Notify"
                          name="BodyFooter">}}</property>
                        <property
                          dataType="System.Int32"
                          description="If your API supports multiple records via HTTP Body then change this setting &gt; 1 to include multiple upstream records into single call. See also BodyHeader, BodyFooter and BodyRowSeparator property. This property is ignored if EnableBodyBatch=false."
                          expressionType="Notify"
                          name="BodyBatchSize">100</property>
                        <property
                          dataType="System.String"
                          description="When you submit multiple rows in a batch you can separate multiple documents / records using custom separator (e.g. in JSON Array you can use comma {,} as record separator if POST document is in array format [ {...}, {...}, {...} ] ). For last row of batch blank separator is used."
                          expressionType="Notify"
                          name="BodyRowSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="Returns response data as binary data (e.g. Byte Array). Check this option is response is Zip file, Image file or any non text data which needs to be exported as raw data without any encoding."
                          expressionType="Notify"
                          name="TreatResponseAsBinary">false</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.WebApiDestination</property>
                        <property
                          dataType="System.Boolean"
                          description="Check this option if you want to upload file(s) (i.e. POST RAW file data) or send data using Multi-Part encoding method (i.e. Content-Type: multipart/form-data). Multi-Part request allows you to mix key/value and upload files in same request. On the other hand raw upload allows only single file upload (without any key/value) &#xA;&#xA;==== Raw Upload (Content-Type: application/octet-stream) =====   &#xA;To upload single file in raw mode check this option and specify full file path starting with @ sign in the Body (e.g.  @c:\data\myfile.zip ) &#xA;&#xA;==== Form-Data / Multipart Upload (Content-Type: multipart/form-data) =====   &#xA;To treat your Request data as multi part fields you must specify key/value pairs separated by new lines into RequestData field (i.e. Body). Each key value pair is entered on new-line and key/value are separated using equal sign (=). Preceding and trailing spaces are ignored also blank lines are ignored. &#xA;If field value has some any special character(s) then use escape sequence (e.g. For NewLine: \r\n, For Tab: \t, For at (@): \@). When value of any field starts with at sign (@) its automatically treated as File you want to upload. By default file content type is determined based on extension however you can supply content type manually for any field using this way [ fieldname.Content-Type=some content type ]. In below example we have supplied Content-Type for file2 and SomeField1, all other fields are using default content-type.&#xA;See below Example of uploading multiple files along with additional fields.&#xA;&#xA;file1=@c:\data\Myfile1.txt&#xA;file2=@c:\data\Myfile2.json&#xA;file2.Content-Type=application/json&#xA;SomeField1=aaaaaaa&#xA;SomeField1.Content-Type=text/plain&#xA;SomeField2=12345&#xA;SomeFieldWithNewLineAndTab=This is line1\r\nThis is line2\r\nThis is \ttab \ttab \ttab&#xA;SomeFieldStartingWithAtSign=\@MyTwitterHandle&#xA;"
                          expressionType="Notify"
                          name="IsMultiPartUpload">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Enable this option if your server is expecting &#xA; (i.e. CRLF) after last Multi-Part boundary in the Body. This option is only applicable if you enabled IsMultiPartUpload and sending data in Key=value format (i.e. Mutipart). For raw file upload this option has no effect."
                          expressionType="Notify"
                          name="AddMultiPartPostamble">false</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Connections[Connection]"
                          connectionManagerID="Package.ConnectionManagers[HTTP 1]"
                          connectionManagerRefId="Package.ConnectionManagers[HTTP 1]"
                          description="Connection manager for authentication (e.g. HTTP or OAuth Connection)"
                          name="Connection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput]"
                          errorRowDisposition="RedirectRow"
                          hasSideEffects="true"
                          name="WebApiDestinationInput"
                          truncationRowDisposition="RedirectRow">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput].Columns[TemplateOutput]"
                              cachedDataType="nText"
                              cachedName="TemplateOutput"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpRequestData]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput].Columns[TemplateOutput]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpRequestUrl]"
                              dataType="wstr"
                              length="2000"
                              name="HttpRequestUrl" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpRequestData]"
                              dataType="nText"
                              name="HttpRequestData" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpHeaders]"
                              dataType="wstr"
                              length="2000"
                              name="HttpHeaders" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="WebApiDestination Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="128"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumnName]"
                              name="ErrorColumnName" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorMessage]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorMessage]"
                              name="ErrorMessage" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output]"
                          exclusionGroup="1"
                          name="Response Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output].Columns[ResponseText]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output].Columns[ResponseText]"
                              name="ResponseText" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output].Columns[StatusCode]"
                              name="StatusCode" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="JSON Parser Transform; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="Parse incoming JSON String into columns. You can also parse and transform single JSON record into multiple rows by filtering data based on JSON Path (e.g. $.Customer.Orders[*])"
                      name="Read Success"
                      usesDispositions="true"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for any numeric data types"
                          expressionType="Notify"
                          name="TreatBlankNumberAsNull">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for bool data types"
                          expressionType="Notify"
                          name="TreatBlankBoolAsNull">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for any date/time data types"
                          expressionType="Notify"
                          name="TreatBlankDateAsNull">true</property>
                        <property
                          dataType="System.Int32"
                          description="Encoding of source file"
                          expressionType="Notify"
                          name="Encoding"
                          typeConverter="ZappySys.Common.EncodingType">0</property>
                        <property
                          dataType="System.String"
                          description="Character set for text (e.g. utf-8 )"
                          expressionType="Notify"
                          name="CharacterSet"></property>
                        <property
                          dataType="System.String"
                          description="Sample JSON data used to parse output columns."
                          expressionType="Notify"
                          name="SampleData"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">{"result":{"1":{"system_record_state":"active","system_ctime":1619719434,"system_modtime":1619719434,"reminder_id":null,"etag":"20867098-1619719434","security_user_rights":["read","update","trash"],"note":"Contact Archived","related":{"note_contacts":[{"id":"3483071","contact":{"system_record_state":"archived","system_ctime":"1581614962","system_modtime":"1619719430","name":"J Gill","email_address":"james.gill@spicerhaart.co.uk","phone_number":"07503 734106","fax_number":null,"is_dnd":null,"type":"person","last_contacted_date":"2021-02-09","name_last":"Gill","address_postal":null,"address":"Colwyn House\r\nSheepen Place\r\nCOLCHESTER\r\nCO3 3LD","interest_level":null,"marketing_birthday":null,"marketing_enquiry_source":null,"marketing_gender":null,"marketing_postcode":null,"name_legal":null,"name_salutation":null,"name_addressee":null,"system_owner_user":{"id":"21562","name":"James Gill","first_name":"James","last_name":"Gill","email_address":"james.gill@spicerhaart.co.uk"},"contact_image":null,"marketing_enquiry_method":null,"etag":"1342554-1619719430","id":"1342554"}}],"note_market_leads":[],"note_properties":[],"note_projects":[],"note_project_stages":[],"note_chain_links":[]},"system_modified_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"system_created_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"note_type":{"id":"note","text":"Note"},"id":20867098},"2":{"system_record_state":"active","system_ctime":1619719434,"system_modtime":1619719434,"reminder_id":null,"etag":"20867099-1619719434","security_user_rights":["read","update","trash"],"note":"Contact Archived","related":{"note_contacts":[{"id":"3483072","contact":{"system_record_state":"archived","system_ctime":"1581614962","system_modtime":"1619719430","name":"J Gill","email_address":"james.gill@spicerhaart.co.uk","phone_number":"07503 734106","fax_number":null,"is_dnd":null,"type":"person","last_contacted_date":"2021-02-09","name_last":"Gill","address_postal":null,"address":"Colwyn House\r\nSheepen Place\r\nCOLCHESTER\r\nCO3 3LD","interest_level":null,"marketing_birthday":null,"marketing_enquiry_source":null,"marketing_gender":null,"marketing_postcode":null,"name_legal":null,"name_salutation":null,"name_addressee":null,"system_owner_user":{"id":"21562","name":"James Gill","first_name":"James","last_name":"Gill","email_address":"james.gill@spicerhaart.co.uk"},"contact_image":null,"marketing_enquiry_method":null,"etag":"1342554-1619719430","id":"1342554"}}],"note_market_leads":[],"note_properties":[],"note_projects":[],"note_project_stages":[],"note_chain_links":[]},"system_modified_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"system_created_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"note_type":{"id":"note","text":"Note"},"id":20867099},"3":{"system_record_state":"active","system_ctime":1619719434,"system_modtime":1619719434,"reminder_id":null,"etag":"20867100-1619719434","security_user_rights":["read","update","trash"],"note":"Contact Archived","related":{"note_contacts":[{"id":"3483073","contact":{"system_record_state":"archived","system_ctime":"1581614962","system_modtime":"1619719430","name":"J Gill","email_address":"james.gill@spicerhaart.co.uk","phone_number":"07503 734106","fax_number":null,"is_dnd":null,"type":"person","last_contacted_date":"2021-02-09","name_last":"Gill","address_postal":null,"address":"Colwyn House\r\nSheepen Place\r\nCOLCHESTER\r\nCO3 3LD","interest_level":null,"marketing_birthday":null,"marketing_enquiry_source":null,"marketing_gender":null,"marketing_postcode":null,"name_legal":null,"name_salutation":null,"name_addressee":null,"system_owner_user":{"id":"21562","name":"James Gill","first_name":"James","last_name":"Gill","email_address":"james.gill@spicerhaart.co.uk"},"contact_image":null,"marketing_enquiry_method":null,"etag":"1342554-1619719430","id":"1342554"}}],"note_market_leads":[],"note_properties":[],"note_projects":[],"note_project_stages":[],"note_chain_links":[]},"system_modified_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"system_created_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"note_type":{"id":"note","text":"Note"},"id":20867100},"4":{"system_record_state":"active","system_ctime":1619719435,"system_modtime":1619719435,"reminder_id":null,"etag":"20867101-1619719435","security_user_rights":["read","update","trash"],"note":"Contact Archived","related":{"note_contacts":[{"id":"3483074","contact":{"system_record_state":"archived","system_ctime":"1581614962","system_modtime":"1619719430","name":"J Gill","email_address":"james.gill@spicerhaart.co.uk","phone_number":"07503 734106","fax_number":null,"is_dnd":null,"type":"person","last_contacted_date":"2021-02-09","name_last":"Gill","address_postal":null,"address":"Colwyn House\r\nSheepen Place\r\nCOLCHESTER\r\nCO3 3LD","interest_level":null,"marketing_birthday":null,"marketing_enquiry_source":null,"marketing_gender":null,"marketing_postcode":null,"name_legal":null,"name_salutation":null,"name_addressee":null,"system_owner_user":{"id":"21562","name":"James Gill","first_name":"James","last_name":"Gill","email_address":"james.gill@spicerhaart.co.uk"},"contact_image":null,"marketing_enquiry_method":null,"etag":"1342554-1619719430","id":"1342554"}}],"note_market_leads":[],"note_properties":[],"note_projects":[],"note_project_stages":[],"note_chain_links":[]},"system_modified_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"system_created_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"note_type":{"id":"note","text":"Note"},"id":20867101},"5":{"system_record_state":"active","system_ctime":1619719435,"system_modtime":1619719435,"reminder_id":null,"etag":"20867102-1619719435","security_user_rights":["read","update","trash"],"note":"Contact Archived","related":{"note_contacts":[{"id":"3483075","contact":{"system_record_state":"archived","system_ctime":"1581614962","system_modtime":"1619719430","name":"J Gill","email_address":"james.gill@spicerhaart.co.uk","phone_number":"07503 734106","fax_number":null,"is_dnd":null,"type":"person","last_contacted_date":"2021-02-09","name_last":"Gill","address_postal":null,"address":"Colwyn House\r\nSheepen Place\r\nCOLCHESTER\r\nCO3 3LD","interest_level":null,"marketing_birthday":null,"marketing_enquiry_source":null,"marketing_gender":null,"marketing_postcode":null,"name_legal":null,"name_salutation":null,"name_addressee":null,"system_owner_user":{"id":"21562","name":"James Gill","first_name":"James","last_name":"Gill","email_address":"james.gill@spicerhaart.co.uk"},"contact_image":null,"marketing_enquiry_method":null,"etag":"1342554-1619719430","id":"1342554"}}],"note_market_leads":[],"note_properties":[],"note_projects":[],"note_project_stages":[],"note_chain_links":[]},"system_modified_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"system_created_user":{"id":"19443","name":"Rosie API","first_name":"Rosie","last_name":"API","email_address":"rosie@spicerhaart.co.uk"},"note_type":{"id":"note","text":"Note"},"id":20867102}},"error":null}
</property>
                        <property
                          dataType="System.Boolean"
                          description="Include all upstream parent columns into output except the one you selected to parse. By default only parsed columns from Input document is included in the output. If you wish to include all other upstream columns in the output too then check this option."
                          expressionType="Notify"
                          name="OutputAllUpstreamColumns">true</property>
                        <property
                          dataType="System.Int32"
                          description="Defines how to handle empty input. By default NULL or Empty input is skipped from parsing."
                          expressionType="Notify"
                          name="EmptyInputProcessingMode"
                          typeConverter="ZappySys.Common.Data.EmptyInputProcessingMode">0</property>
                        <property
                          dataType="System.String"
                          description="Defines how to handle empty input. By default NULL or Empty input is skipped from parsing."
                          expressionType="Notify"
                          name="TreatEmptyInputAs">{ }</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum JSON records to fetch. Set this value to 0 for all records"
                          expressionType="Notify"
                          name="MaxRows">0</property>
                        <property
                          dataType="System.String"
                          description="Enter expression here to filter data.(Example:  $.Users[*].UserName ) This will fetch User names from users records"
                          expressionType="Notify"
                          name="Filter"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">$.result</property>
                        <property
                          dataType="System.Boolean"
                          description="Use this option to include parent properties (Non array) in the output along with Filtered Rows"
                          expressionType="Notify"
                          name="IncludeParentColumns">true</property>
                        <property
                          dataType="System.Boolean"
                          description="By default child and parent information is not included in the output if children not found for specified expression. For example if you want to extract all orders from all customers nodes then you can type $.Customers[*].Orders[*]. This will fetch all orders from all customers. By default customers records without orders wont be included in the output. If you want to include those customers where orders not found then check this option (Output null information for order attributes). This behavior is similar to LEFT OUTER JOIN in SQL (Left side is parent, right side is child). This option is ***resource intensive*** so only check if you really care about this behavior."
                          expressionType="Notify"
                          name="IncludeParentColumnsWhenChildMissing">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Set this option to true if you want to output parent columns which are array. By default any parent column which is an array is not included in output. See also FilterForParentColumnsWithArrayType property if you set this property"
                          expressionType="Notify"
                          name="IncludeParentColumnsWithArrayType">true</property>
                        <property
                          dataType="System.String"
                          description="Filter expression to extract value form parent"
                          expressionType="Notify"
                          name="FilterForParentColumnsWithArrayType"></property>
                        <property
                          dataType="System.String"
                          description="Prefix for parent column name. This option is only valid if you have set IncludeParentColumns=True"
                          expressionType="Notify"
                          name="ParentColumnPrefix">P_</property>
                        <property
                          dataType="System.Boolean"
                          description="Throw error if property name specified in filter expression is missing. By default it will ignore any missing property errors."
                          expressionType="Notify"
                          name="ThrowErrorIfPropertyMissing">false</property>
                        <property
                          dataType="System.Int32"
                          description="This property how many nested levels should be scanned to fetch various properties. 0=Scan all child levels."
                          expressionType="Notify"
                          name="MaxLevelsToScan">0</property>
                        <property
                          dataType="System.String"
                          description="List comma separated property names from JSON document which you want to exclude from output. Specify parent property name to exclude all child nodes."
                          expressionType="Notify"
                          name="ExcludedProperties"></property>
                        <property
                          dataType="System.String"
                          description="Property level separator used in generated property name (separator for outer properties - Above selected filter node). Use this if default separator is producing duplicate property name which is conflicting with existing name."
                          expressionType="Notify"
                          name="LevelSeparator">_</property>
                        <property
                          dataType="System.Boolean"
                          description="Enables deep array flattening for selected filtered hierarchy. When you turn on this property it will flatten each property of each array item and expose as column (e.g. If you have Filter set as $.customers[*] and for each customer you have an array of Addresses then you may see output columns like Addresses.1.City, Addresses.1.State, Addresses.2.City, Addresses.2.State .... Addresses.N.City, Addresses.N.State). You can control how many array items you want to flatten by setting MaxArrayItemsToFlatten property."
                          expressionType="Notify"
                          name="EnableArrayFlattening">false</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum number of array items to flatten. inner array flattening. Adjust this property to control how many columns being generated. This option is ignored if you set EnableArrayFlattening=false"
                          expressionType="Notify"
                          name="MaxArrayItemsToFlatten">10</property>
                        <property
                          dataType="System.String"
                          description="Specifies how custom date formatted strings are parsed when reading JSON."
                          expressionType="Notify"
                          name="DateFormatString"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies how date formatted strings, e.g. Date(1198908717056) and 2012-03-21T05:40Z, are parsed when reading JSON."
                          expressionType="Notify"
                          name="DateParseHandling"
                          typeConverter="ZappySys.Common.DateParseHandling">1</property>
                        <property
                          dataType="System.Boolean"
                          description="Indent JSON output so its easy to read."
                          expressionType="Notify"
                          name="IndentOutput">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Output as raw JSON document rather than parsing individual fields. This option is helpful if you have documents stored in a file and you want to pass them downstream as raw JSON string rather than parsing into columns."
                          expressionType="Notify"
                          name="OutputRawDocument">false</property>
                        <property
                          dataType="System.Boolean"
                          description="When this property is true then Column is converted to Row. Pivoted names will appear under  Pivot_Name column and values will appear under Pivot_Value field."
                          expressionType="Notify"
                          name="EnablePivot">true</property>
                        <property
                          dataType="System.Int32"
                          description="Array Transformation you want to apply. Useful for case when you have 2-Dimensional arrays with rows/columns in separate arrays."
                          expressionType="Notify"
                          name="ArrayTransformationType"
                          typeConverter="ZappySys.Json.ArrayTransformType">0</property>
                        <property
                          dataType="System.String"
                          description="Filter expression to use to extract column names for array transformation."
                          expressionType="Notify"
                          name="ArrayTransColumnNameFilter"></property>
                        <property
                          dataType="System.String"
                          description="Filter expression for row values (Not applicable for simple array transformation)."
                          expressionType="Notify"
                          name="ArrayTransRowValueFilter"></property>
                        <property
                          dataType="System.Boolean"
                          description="When you have 2D array but don't have column list specified in a separate array then use this option (e.g. { arr: [[10,11],[21,22]] } ). If you selected Column less array or JSON Lines option then this property means Column Names coming from First Line of array."
                          expressionType="Notify"
                          name="ArrayTransEnableCustomColumns">false</property>
                        <property
                          dataType="System.String"
                          description="When you have 2D array but don't have column list specified in a separate array then use specify column names here. Use comma separated list (e.g col1,col2,col3 ). Column name Order must match value order."
                          expressionType="Notify"
                          name="ArrayTransCustomColumns"></property>
                        <property
                          dataType="System.Int32"
                          description="Metadata scan mode controls how data type and length is determined. By default few records scanned to determine datatype/length. Changing ScanMode affects length/datatype accuracy."
                          expressionType="Notify"
                          name="MetaDataScanMode"
                          typeConverter="ZappySys.Common.Data.MetaDataScanMode">4</property>
                        <property
                          dataType="System.Int32"
                          description="Length for all string column. This option is only valid for MetaDataScanMode=Custom"
                          expressionType="Notify"
                          name="MetaDataCustomLength">1000</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.JsonParserTransform</property>
                        <property
                          dataType="System.Boolean"
                          name="EnableBigNumberHandling">false</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput]"
                          errorRowDisposition="FailComponent"
                          name="JsonParserTransformInput"
                          truncationRowDisposition="FailComponent">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[ResponseText]"
                              cachedDataType="nText"
                              cachedName="ResponseText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output].Columns[ResponseText]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Id]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[EntityId]"
                              cachedDataType="i4"
                              cachedName="EntityId"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityId]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityId]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[EntityType]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="EntityType"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[EntityType]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityType]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[Action]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Action"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output].Columns[Action]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Action]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[ContactNote]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="ContactNote"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Output].Columns[ContactNote]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[ContactNote]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[TemplateOutput]"
                              cachedDataType="nText"
                              cachedName="TemplateOutput"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput].Columns[TemplateOutput]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[StatusCode]"
                              cachedDataType="i4"
                              cachedName="StatusCode"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output].Columns[StatusCode]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[StatusCode]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True" />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput]"
                          errorOrTruncationOperation="Error"
                          errorRowDisposition="RedirectRow"
                          name="JsonParserTransformOutput"
                          truncationRowDisposition="RedirectRow">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[StatusCode]"
                              name="StatusCode" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              dataType="nText"
                              description="Template output column which will contain replaced text."
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[ContactNote]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[ContactNote]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[ContactNote]"
                              name="ContactNote" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Action]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[Action]"
                              name="Action" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityType]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[EntityType]"
                              name="EntityType" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityId]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[EntityId]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[EntityId]"
                              name="EntityId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]"
                              dataType="wstr"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Name]"
                              length="4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Name]"
                              name="Pivot_Name" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]"
                              dataType="i8"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.id]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.id]"
                              name="Pivot_Value.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.note_type.id]"
                              dataType="wstr"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.note_type.id]"
                              length="16"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.note_type.id]"
                              name="Pivot_Value.note_type.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.related.note_contacts]"
                              dataType="nText"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_contacts]"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.related.note_contacts]"
                              name="Pivot_Value.related.note_contacts" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.etag]"
                              dataType="wstr"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.etag]"
                              length="76"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[Pivot_Value.etag]"
                              name="Pivot_Value.etag" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[P_error]"
                              dataType="wstr"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[P_error]"
                              length="1020"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].Columns[P_error]"
                              name="P_error" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[P_error]"
                              dataType="wstr"
                              length="1020"
                              name="P_error" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Name]"
                              dataType="wstr"
                              length="4"
                              name="Pivot_Name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_record_state]"
                              dataType="wstr"
                              length="24"
                              name="Pivot_Value.system_record_state" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_ctime]"
                              dataType="i8"
                              name="Pivot_Value.system_ctime" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_modtime]"
                              dataType="i8"
                              name="Pivot_Value.system_modtime" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.reminder_id]"
                              dataType="wstr"
                              length="1020"
                              name="Pivot_Value.reminder_id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.etag]"
                              dataType="wstr"
                              length="76"
                              name="Pivot_Value.etag" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.security_user_rights]"
                              dataType="wstr"
                              length="156"
                              name="Pivot_Value.security_user_rights" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.note]"
                              dataType="wstr"
                              length="64"
                              name="Pivot_Value.note" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_contacts]"
                              dataType="nText"
                              name="Pivot_Value.related.note_contacts" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_market_leads]"
                              dataType="wstr"
                              length="8"
                              name="Pivot_Value.related.note_market_leads" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_properties]"
                              dataType="wstr"
                              length="8"
                              name="Pivot_Value.related.note_properties" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_projects]"
                              dataType="wstr"
                              length="8"
                              name="Pivot_Value.related.note_projects" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_project_stages]"
                              dataType="wstr"
                              length="8"
                              name="Pivot_Value.related.note_project_stages" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.related.note_chain_links]"
                              dataType="wstr"
                              length="8"
                              name="Pivot_Value.related.note_chain_links" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_modified_user.id]"
                              dataType="wstr"
                              length="20"
                              name="Pivot_Value.system_modified_user.id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_modified_user.name]"
                              dataType="wstr"
                              length="36"
                              name="Pivot_Value.system_modified_user.name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_modified_user.first_name]"
                              dataType="wstr"
                              length="20"
                              name="Pivot_Value.system_modified_user.first_name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_modified_user.last_name]"
                              dataType="wstr"
                              length="12"
                              name="Pivot_Value.system_modified_user.last_name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_modified_user.email_address]"
                              dataType="wstr"
                              length="92"
                              name="Pivot_Value.system_modified_user.email_address" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_created_user.id]"
                              dataType="wstr"
                              length="20"
                              name="Pivot_Value.system_created_user.id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_created_user.name]"
                              dataType="wstr"
                              length="36"
                              name="Pivot_Value.system_created_user.name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_created_user.first_name]"
                              dataType="wstr"
                              length="20"
                              name="Pivot_Value.system_created_user.first_name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_created_user.last_name]"
                              dataType="wstr"
                              length="12"
                              name="Pivot_Value.system_created_user.last_name" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.system_created_user.email_address]"
                              dataType="wstr"
                              length="92"
                              name="Pivot_Value.system_created_user.email_address" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.note_type.id]"
                              dataType="wstr"
                              length="16"
                              name="Pivot_Value.note_type.id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.note_type.text]"
                              dataType="wstr"
                              length="16"
                              name="Pivot_Value.note_type.text" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput].ExternalColumns[Pivot_Value.id]"
                              dataType="i8"
                              name="Pivot_Value.id" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output]"
                          isErrorOut="true"
                          name="JsonParserTransform Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[StatusCode]"
                              name="StatusCode" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ContactNote]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ContactNote]"
                              name="ContactNote" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Action]"
                              name="Action" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[EntityType]"
                              name="EntityType" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[EntityId]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[EntityId]"
                              name="EntityId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Name]"
                              dataType="wstr"
                              length="4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Name]"
                              name="Pivot_Name" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.id]"
                              dataType="i8"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.id]"
                              name="Pivot_Value.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.note_type.id]"
                              dataType="wstr"
                              length="16"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.note_type.id]"
                              name="Pivot_Value.note_type.id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.related.note_contacts]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.related.note_contacts]"
                              name="Pivot_Value.related.note_contacts" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.etag]"
                              dataType="wstr"
                              length="76"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.etag]"
                              name="Pivot_Value.etag" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[P_error]"
                              dataType="wstr"
                              length="1020"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[P_error]"
                              name="P_error" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="128"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]"
                              name="ErrorColumnName" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]"
                              dataType="wstr"
                              length="1024"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]"
                              name="ErrorMessage" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]"
                              name="ErrorRawData" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Trash Destination"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath">C:\SSISVariables\Log\CapaignAdd10</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">false</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput].Columns[TemplateOutput]"
                              cachedDataType="nText"
                              cachedName="TemplateOutput"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput].Columns[TemplateOutput]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorCode]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumn]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput].Columns[ErrorColumnName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="128"
                              cachedName="ErrorColumnName"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumnName]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput].Columns[ErrorMessage]"
                              cachedDataType="nText"
                              cachedName="ErrorMessage"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output].Columns[ErrorMessage]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Trash Destination 1"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath">C:\SSISVariables\Log\CapaignAdd19</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">false</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[StatusCode]"
                              cachedDataType="i4"
                              cachedName="StatusCode"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[StatusCode]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[TemplateOutput]"
                              cachedDataType="nText"
                              cachedName="TemplateOutput"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[Pivot_Name]"
                              cachedDataType="wstr"
                              cachedLength="4"
                              cachedName="Pivot_Name"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Name]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[Pivot_Value.id]"
                              cachedDataType="i8"
                              cachedName="Pivot_Value.id"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[Pivot_Value.id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[ErrorColumnName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="128"
                              cachedName="ErrorColumnName"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[ErrorMessage]"
                              cachedDataType="wstr"
                              cachedLength="1024"
                              cachedName="ErrorMessage"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput].Columns[ErrorRawData]"
                              cachedDataType="nText"
                              cachedName="ErrorRawData"
                              lineageId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 2"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Trash Destination 2"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath"></property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">false</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 2.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 3"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Trash Destination 3"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath"></property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">false</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 3.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Conditional Split Default Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Inputs[Derived Column Input]"
                      name="Conditional Split Default Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Default Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Conditional Split Error Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 2.Inputs[TrashDestinationInput]"
                      name="Conditional Split Error Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Conditional Split Error Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Data Conversion Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record.Inputs[OLE DB Destination Input]"
                      name="Data Conversion Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Derived Column Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Inputs[TemplateTransformInput]"
                      name="Derived Column Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Derived Column Output1]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion.Inputs[Data Conversion Input]"
                      name="Derived Column Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Fail]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 3.Inputs[TrashDestinationInput]"
                      name="Fail"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Outputs[Fail]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[JsonParserTransform Error Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1.Inputs[TrashDestinationInput]"
                      name="JsonParserTransform Error Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransform Error Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[JsonParserTransformOutput]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Inputs[JsonParserTransformInput]"
                      name="JsonParserTransformOutput"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Outputs[JsonParserTransformOutput]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[JsonParserTransformOutput1]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check.Inputs[Conditional Split Input]"
                      name="JsonParserTransformOutput"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id.Outputs[JsonParserTransformOutput]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[OLE DB Source Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text.Inputs[Derived Column Input]"
                      name="OLE DB Source Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL.Outputs[OLE DB Source Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Response Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success.Inputs[JsonParserTransformInput]"
                      name="Response Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[Response Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[TemplateTransformOutput]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Inputs[WebApiDestinationInput]"
                      name="TemplateTransformOutput"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON.Outputs[TemplateTransformOutput]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[WebApiDestination Error Output]"
                      endId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination.Inputs[TrashDestinationInput]"
                      name="WebApiDestination Error Output"
                      startId="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request.Outputs[WebApiDestination Error Output]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Iterate Offices\Sequence Container\Email Auth Failure"
              DTS:CreationName="ZappySys.HtmlEmailTask"
              DTS:Description="Email Auth Failure"
              DTS:DTSID="{25D01903-B06F-4349-A25B-645F38F836CA}"
              DTS:ExecutableType="ZappySys.HtmlEmailTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Email Auth Failure"
              DTS:TaskContact="HTML Email Task; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <HtmlEmailTask
                  SmtpConnection="SMTP"
                  IsHtmlEmail="True"
                  DefaultStyle="&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;body,div,p,span,td,th,table {&#xA; font-family: Helvetica, Arial, sans-serif;&#xA; font-size: 10pt; &#xA;}&#xA;h1,h2,h3,h4,h5{&#xA;font-family: Helvetica, Arial, sans-serif;&#xA;}&#xA;&#xA;table { &#xA; border-collapse: &#xA; collapse; border-spacing: 0; &#xA;}&#xA;&#xA;tr.odd    {background-color: #cccccc}&#xA;tr.even   {background-color: #fafafa}&#xA;td, th { border: 1px solid #bbb;padding: 5 5 5 5} &#xA;th { background: #F3F3F3;  font-weight: bold;}&#xA;&lt;/style&gt;&#xA;&#xA;"
                  Subject="Error occured in {{System::PackageName}}"
                  From="alerts@spicerhaart.co.uk"
                  To="{{User::PackageErrorEmail}}"
                  Cc=""
                  ReplyTo=""
                  Bcc=""
                  Attachments=""
                  EmailPriority="High"
                  MessageSourceType="Direct"
                  MessageDirectValue="&lt;b&gt;Failed to get Authorization Key&lt;/b&gt;&lt;p /&gt;&#xA;&#xA;&lt;p&gt; Response Code =&gt; {{User::ResponseAuthCode}} &lt;p /&gt;&#xA;&#xA;"
                  MessageFileConnection=""
                  MessageVariable=""
                  LogLevel="Normal"
                  PrefixTimestamp="False" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Iterate Offices\Sequence Container\Get Auth Key"
              DTS:CreationName="ZappySys.RestApiTask"
              DTS:Description="ZS REST API Task"
              DTS:DTSID="{F7D791CF-73C2-40EF-9A1C-1537B531A57C}"
              DTS:ExecutableType="ZappySys.RestApiTask"
              DTS:FailPackageOnFailure="True"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Auth Key"
              DTS:TaskContact="REST API Task; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <RestApiTask
                  RequestAccessMode="DirectUrl"
                  RequestUrlVariable=""
                  EnableStatusCheck="False"
                  StatusCheckMaxWaitSeconds="0"
                  StatusFieldFilterType="None"
                  StatusFieldFilterExpr=""
                  StatusCheckIterationWaitSeconds="0"
                  StatusCheckForFailedValue="False"
                  StatusSuccessValue=""
                  StatusContinueValue=""
                  StatusFailedValue=""
                  IsMultiPartUpload="False"
                  AddMultiPartPostamble="False"
                  PreventAutoRedirect="False"
                  RequestTimeoutMs="0"
                  SecurityProtocol="Default"
                  EnableCompressionSupport="True"
                  AllowUnsecureSuite="False"
                  IgnoreCertificateErrors="False"
                  RequestUrl="{{User::RexAPIWebURL}}"
                  RequestUrlConnection=""
                  RequestMethod="POST"
                  RequestContentType="ApplicationJson"
                  OverrideConnectionUrl="False"
                  RequestHeaders="&lt;request&gt;&lt;header&gt;&lt;name&gt;Accept&lt;/name&gt;&lt;value&gt;*/*&lt;/value&gt;&lt;/header&gt;&lt;header&gt;&lt;name&gt;Cache-Control&lt;/name&gt;&lt;value&gt;no-cache&lt;/value&gt;&lt;/header&gt;&lt;/request&gt;"
                  RequestData="{&#xA;&quot;method&quot;:&quot;Authentication::login&quot;,&#xA;&quot;args&quot;:{&#xA;&quot;email&quot;:&quot;{{User::PackageUser}}&quot;,&#xA;&quot;password&quot;:&quot;{{User::PackagePassword}}&quot;,&#xA;&quot;account_id&quot;:&quot;{{User::RexAccountID}}&quot;,&#xA;&quot;application&quot;:&quot;rex&quot;&#xA;}&#xA;}"
                  SaveResponse="True"
                  SaveResponseStatusCode="True"
                  ResponseAccessMode="Variable"
                  SaveAsBinary="False"
                  ResponseDataFilePath=""
                  ResponseHeaderMappings="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;ArrayOfKeyValueMapping xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Transfer-Encoding&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Connection&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Access-Control-Allow-Origin&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Access-Control-Allow-Headers&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Access-Control-Allow-Methods&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Access-Control-Max-Age&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Vary&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Content-Encoding&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Content-Type&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Date&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;KeyValueMapping&gt;&lt;Key&gt;Server&lt;/Key&gt;&lt;Target&gt;&amp;lt;NOT-MAPPED&amp;gt;&lt;/Target&gt;&lt;Required&gt;false&lt;/Required&gt;&lt;/KeyValueMapping&gt;&lt;/ArrayOfKeyValueMapping&gt;"
                  ResponseCookieMappings="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;ArrayOfKeyValueMapping xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; /&gt;"
                  CookieContainerVariable=""
                  ConvertXmlToJson="False"
                  ResponseDataVariable="User::RexToken"
                  ResponseStatusCodeVariable="User::ResponseAuthCode"
                  ResponseContentType="Json"
                  ResponseContentFilter="$.result"
                  ResponseCharset=""
                  ValidateResponse="False"
                  ValidationRules="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;ResponseValidationSetting xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&lt;MatchAny&gt;false&lt;/MatchAny&gt;&lt;Rules&gt;&lt;ResponseValidationRule xsi:type=&quot;StatusCodeValidationRule&quot;&gt;&lt;Enabled&gt;false&lt;/Enabled&gt;&lt;Operator&gt;Eq&lt;/Operator&gt;&lt;StatusCode&gt;200&lt;/StatusCode&gt;&lt;/ResponseValidationRule&gt;&lt;ResponseValidationRule xsi:type=&quot;ContentValidationRule&quot;&gt;&lt;Enabled&gt;false&lt;/Enabled&gt;&lt;Operator&gt;Eq&lt;/Operator&gt;&lt;Value /&gt;&lt;/ResponseValidationRule&gt;&lt;ResponseValidationRule xsi:type=&quot;HeaderValidationRule&quot;&gt;&lt;Enabled&gt;false&lt;/Enabled&gt;&lt;Operator&gt;Eq&lt;/Operator&gt;&lt;KeyName /&gt;&lt;Value /&gt;&lt;DataType&gt;String&lt;/DataType&gt;&lt;/ResponseValidationRule&gt;&lt;/Rules&gt;&lt;/ResponseValidationSetting&gt;"
                  ConsumeResponseOnError="False"
                  ContineOnAnyError="False"
                  ContineOnErrorForMessage="False"
                  ContineOnErrorForStatusCode="False"
                  ErrorStatusCodeToMatch="404"
                  MatchForEqual="True"
                  ErrorSubstringToMatch=""
                  ContineOn404Error="False"
                  SaveErrorFlagToVariable="False"
                  ErrorFlagVariableName=""
                  LogLevel="Normal"
                  PrefixTimestamp="False" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{F368D957-42A8-4B84-BAB8-B5AA5A1B5DDD}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:ObjectName="Search Normalised Contacts and Archive"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add permalink"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Inputs[Derived Column Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Inputs[Derived Column Input].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[AccountId]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Output].Columns[permalink]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="159"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Output].Columns[permalink]"
                              name="permalink"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">"https://app.rexsoftware.com/contacts/#id=" + (DT_WSTR,100)#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Id]} + "&amp;_account_id=" + (DT_WSTR,5)#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[AccountId]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">"https://app.rexsoftware.com/contacts/#id=" + (DT_WSTR,100)Id + "&amp;_account_id=" + (DT_WSTR,5)AccountId</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add permalink 1"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Inputs[Derived Column Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Inputs[Derived Column Input].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Output].Columns[permalink]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="159"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Output].Columns[permalink]"
                              name="permalink"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">"https://app.rexsoftware.com/contacts/#id=" + (DT_WSTR,100)#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]} + "&amp;_account_id=" + (DT_WSTR,5)#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">"https://app.rexsoftware.com/contacts/#id=" + (DT_WSTR,100)Id + "&amp;_account_id=" + (DT_WSTR,5)AccountId</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Template Transform; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="Template transform allows to produce multi line string from template text. You can insert placeholders anywhere in the string. Ideal use case would be produce simple XML or JSON without use of JSON or XML Generator Transform."
                      name="Build Contact ChangeState"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="Template text which needs to be replaced. Any where in the text you can use input column names as placeholders (e.g. &lt;%CustomerEmail%&gt; ). You can also use user/system variable as placeholder (e.g. {{User::MyVariable}} )"
                          expressionType="Notify"
                          name="TemplateText"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">{  
   "method":"Contacts::archive",
   "args":{  
    
        "id" : &lt;%Id%&gt;
         }
      
   ,
   "strip_response_prefixes":"True",
   "token":"{{User::RexToken}}"
}</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TemplateTransform</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Inputs[TemplateTransformInput]"
                          name="TemplateTransformInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Inputs[TemplateTransformInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Outputs[TemplateTransformOutput]"
                          errorOrTruncationOperation="Error"
                          name="TemplateTransformOutput"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Inputs[TemplateTransformInput]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Outputs[TemplateTransformOutput].Columns[TemplateOutput]"
                              dataType="nText"
                              description="Template output column which will contain replaced text."
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Outputs[TemplateTransformOutput].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1"
                      componentClassID="Microsoft.ConditionalSplit"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Check for Sol 1"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Inputs[Conditional Split Input].Columns[Solicitor1Id]"
                              cachedDataType="i4"
                              cachedName="Solicitor1Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Solicitor1Id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[No Solicitor Found]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          exclusionGroup="1"
                          name="No Solicitor Found"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Inputs[Conditional Split Input]"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">[ISNULL](#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Solicitor1Id]}) ==  TRUE </property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">ISNULL(Solicitor1Id) ==  TRUE </property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Default Output]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="Conditional Split Default Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2"
                      componentClassID="Microsoft.ConditionalSplit"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Check for Sol 2"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Inputs[Conditional Split Input].Columns[Solicitor2Id]"
                              cachedDataType="i4"
                              cachedName="Solicitor2Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor2Id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[No sol found]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          exclusionGroup="1"
                          name="No sol found"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Inputs[Conditional Split Input]"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">[ISNULL](#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor2Id]}) ==  TRUE </property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">ISNULL(Solicitor2Id) ==  TRUE </property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Default Output]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="Conditional Split Default Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split"
                      componentClassID="Microsoft.ConditionalSplit"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Conditional Split"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input].Columns[error]"
                              cachedDataType="wstr"
                              cachedLength="1020"
                              cachedName="error"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[error]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[Id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Case 1]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          exclusionGroup="1"
                          name="Case 1"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input]"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">[ISNULL](#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[error]}) ==  TRUE  &amp;&amp; #{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[Id]} &gt; 0</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">ISNULL(error) ==  TRUE  &amp;&amp; Id &gt; 0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Default Output]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="Conditional Split Default Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1"
                      componentClassID="Microsoft.ConditionalSplit"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Conditional Split 1"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Case 1]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          exclusionGroup="1"
                          name="Case 1"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Inputs[Conditional Split Input]"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">@[$Package::Mode] == "Preview"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">@[$Package::Mode] == "Preview"</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Default Output]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="Conditional Split Default Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL"
                      componentClassID="Microsoft.OLEDBSource"
                      contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                      description="OLE DB Source"
                      name="Contacts From SQL"
                      usesDispositions="true"
                      version="7">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">DECLARE @accountid INT;
DECLARE @numdays INT;
SET @numdays  = ?
SET @accountid  = ?
SELECT cb.[Id], 
       cb.[AccountId]
FROM [Entities].[dbo].[vwContactBase] cb WITH(NOLOCK)
WHERE [system_record_state] = 'Active'
      AND cb.[ApplicantStatus] = 'Archived'
      AND cb.[AccountId] = @accountid
      AND ISNULL(cb.Type,'') NOT IN ('Business')
      AND ISNULL([Business Type] ,'') = ''
      AND NOT EXISTS -- Not already processed
(
    SELECT *
    FROM [Entities].[dbo].[AutoTasks] WITH(NOLOCK)
    WHERE [EntityId] = cb.id
          AND [Action] = 'Contact Archived'
          AND DateAdded &gt;= GETDATE() - @numdays
)</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">2</property>
                        <property
                          dataType="System.String"
                          description="The mappings between the parameters in the SQL command and variables."
                          name="ParameterMapping">"Parameter0:Input",{3741D993-EA1C-4980-9639-E6DF941D3E9D};"Parameter1:Input",{354D1EFB-82E3-429A-AE25-A8E9A60FBDAE};</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          connectionManagerRefId="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output]"
                          isSorted="true"
                          name="OLE DB Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].Columns[Id]"
                              dataType="i4"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].ExternalColumns[Id]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].Columns[Id]"
                              name="Id"
                              sortKeyPosition="1"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].Columns[AccountId]"
                              dataType="i2"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].ExternalColumns[AccountId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].Columns[AccountId]"
                              name="AccountId"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].ExternalColumns[Id]"
                              dataType="i4"
                              name="Id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].ExternalColumns[AccountId]"
                              dataType="i2"
                              name="AccountId" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output]"
                          isErrorOut="true"
                          name="OLE DB Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[AccountId]"
                              dataType="i2"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[AccountId]"
                              name="AccountId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\CSV Preview"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="CSV Preview"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath">C:\SSISVariables\Log\ContactArchivePreview.csv</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">true</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\CSV Preview.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\CSV Preview.Inputs[TrashDestinationInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\CSV Preview.Inputs[TrashDestinationInput].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Derived Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output].Columns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output].Columns[EntityType]"
                              name="EntityType"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_STR,50,1252)"Contact"</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_STR,50,1252)"Contact"</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output].Columns[Action]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output].Columns[Action]"
                              name="Action"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_STR,50,1252)"Contact Archived"</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_STR,50,1252)"Contact Archived"</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Ignore as sol 1"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath">C:\SSISVariables\Log\ignoresols1.csv</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">true</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1.Inputs[TrashDestinationInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1.Inputs[TrashDestinationInput].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[AccountId]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1.Inputs[TrashDestinationInput].Columns[Solicitor1Id]"
                              cachedDataType="i4"
                              cachedName="Solicitor1Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Solicitor1Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1.Inputs[TrashDestinationInput].Columns[permalink]"
                              cachedDataType="wstr"
                              cachedLength="159"
                              cachedName="permalink"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Output].Columns[permalink]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Ignore as sol 2"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath">C:\SSISVariables\Log\ignoresol2.csv</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">true</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput].Columns[Solicitor1Id]"
                              cachedDataType="i4"
                              cachedName="Solicitor1Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor1Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput].Columns[Solicitor2Id]"
                              cachedDataType="i4"
                              cachedName="Solicitor2Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor2Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput].Columns[permalink]"
                              cachedDataType="wstr"
                              cachedLength="159"
                              cachedName="permalink"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Output].Columns[permalink]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert Action Record"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[dbo].[AutoTasks]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          connectionManagerRefId="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].Columns[EntityType]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="EntityType"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityType]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output].Columns[EntityType]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].Columns[Action]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Action"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[Action]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output].Columns[Action]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[Id]"
                              dataType="i4"
                              name="Id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityId]"
                              dataType="i4"
                              name="EntityId" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[EntityType]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="EntityType" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[Action]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="Action" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[NoteId]"
                              dataType="i4"
                              name="NoteId" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input].ExternalColumns[DateAdded]"
                              dataType="dbTimeStamp"
                              name="DateAdded" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join"
                      componentClassID="Microsoft.MergeJoin"
                      contactInfo="Merge Join;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Combine two sorted data flows into one using the FULL, LEFT, or INNER join. We recommend this transformation when data flows can be sorted at their sources."
                      name="Merge Join"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the type of join to perform."
                          name="JoinType"
                          typeConverter="JoinType">1</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the number of columns in the ordering key."
                          name="NumKeyColumns">1</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the null values are treated as equal values."
                          name="TreatNullsAsEqual">true</property>
                        <property
                          dataType="System.Int32"
                          description="Indicates the requested maximum buffers per input before blocking."
                          name="MaxBuffersPerInput">5</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Left Input]"
                          hasSideEffects="true"
                          name="Merge Join Left Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Left Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Left Input].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output].Columns[AccountId]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Right Input]"
                          hasSideEffects="true"
                          name="Merge Join Right Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Right Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].Columns[Id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output]"
                          isSorted="true"
                          name="Merge Join Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Id]"
                              name="Id"
                              sortKeyPosition="1">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Left Input].Columns[Id]}</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[AccountId]"
                              dataType="i2"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[AccountId]"
                              name="AccountId">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Left Input].Columns[AccountId]}</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Solicitor1Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Solicitor1Id]"
                              name="Solicitor1Id">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Right Input].Columns[Id]}</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1"
                      componentClassID="Microsoft.MergeJoin"
                      contactInfo="Merge Join;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Combine two sorted data flows into one using the FULL, LEFT, or INNER join. We recommend this transformation when data flows can be sorted at their sources."
                      name="Merge Join 1"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the type of join to perform."
                          name="JoinType"
                          typeConverter="JoinType">1</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the number of columns in the ordering key."
                          name="NumKeyColumns">1</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the null values are treated as equal values."
                          name="TreatNullsAsEqual">true</property>
                        <property
                          dataType="System.Int32"
                          description="Indicates the requested maximum buffers per input before blocking."
                          name="MaxBuffersPerInput">5</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input]"
                          hasSideEffects="true"
                          name="Merge Join Left Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Id]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[AccountId]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input].Columns[Solicitor1Id]"
                              cachedDataType="i4"
                              cachedName="Solicitor1Id"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output].Columns[Solicitor1Id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Right Input]"
                          hasSideEffects="true"
                          name="Merge Join Right Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Right Input].Columns[id]"
                              cachedDataType="i4"
                              cachedName="id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].Columns[id]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output]"
                          isSorted="true"
                          name="Merge Join Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]"
                              name="Id"
                              sortKeyPosition="1">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input].Columns[Id]}</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]"
                              dataType="i2"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]"
                              name="AccountId">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input].Columns[AccountId]}</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor1Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor1Id]"
                              name="Solicitor1Id">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input].Columns[Solicitor1Id]}</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor2Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Solicitor2Id]"
                              name="Solicitor2Id">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="The input column associated with this output column"
                                  name="InputColumnID">#{Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Right Input].Columns[id]}</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Web API Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The Web API destination can be used to send data to Web API URL (e.g. Submit or POST data to REST API/SOAP or other HTTP/HTTPS endpoints)"
                      name="Post Contact Archive Request"
                      usesDispositions="true"
                      version="5">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="API URL you want to access"
                          expressionType="Notify"
                          name="HttpRequestUrl">{{User::RexAPIWebURL}}</property>
                        <property
                          dataType="System.String"
                          description="Http Web Request Method (e.g. POST, GET, PUT, LIST, DELETE...). Refer your API documentation if you are not sure which method you have to use."
                          expressionType="Notify"
                          name="HttpRequestMethod">POST</property>
                        <property
                          dataType="System.String"
                          description="Set this if you want to set custom Http headers. You may use variable anywhere in the header value using syntax {{User::YourVarName}}. Syntax of Header key value pair is : &amp;lt;request&amp;gt;&amp;lt;header&amp;gt;&amp;lt;name&amp;gt;x-myheader-1&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;AAA&amp;lt;/value&amp;gt;&amp;lt;/header&amp;gt; &amp;lt;header&amp;gt;&amp;lt;name&amp;gt;x-myheader-2&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;BBB&amp;lt;/value&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;/request&amp;gt;"
                          expressionType="Notify"
                          name="HttpHeaders"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">&lt;request&gt;&lt;header&gt;&lt;name&gt;Accept&lt;/name&gt;&lt;value&gt;*/*&lt;/value&gt;&lt;/header&gt;&lt;header&gt;&lt;name&gt;Cache-Control&lt;/name&gt;&lt;value&gt;no-cache&lt;/value&gt;&lt;/header&gt;&lt;/request&gt;</property>
                        <property
                          dataType="System.String"
                          description="User defined data you wish to send along with your HTTP Request (e.g. Upload file data, Form POST data). Usually you have to set content-type of your data but if you select RequestMethod=POST then system will automatically set content-type=application/x-www-form-urlencoded."
                          expressionType="Notify"
                          name="HttpRequestData"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies content type for data you wish to POST. If you select Default option then system default content type will be used (i.e. application/x-www-form-urlencoded). If you specify Content-Type header along with this option then header value takes precedence."
                          expressionType="Notify"
                          name="HttpRequestContentType"
                          typeConverter="ZappySys.Common.Web.HttpRequestContentType">0</property>
                        <property
                          dataType="System.Boolean"
                          description="If this option is true then component will continue without exception on 404 error (Url not found). This allows you to consume data gracefully."
                          expressionType="Notify"
                          name="ContinueOnUrlNotFoundError">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Ignore SSL certificate related errors. Example: if you getting SSL/TLS errors because of certificate expired or certificate is not from trusted authority or certificate is self-signed. By checking this option you will not get SSL/TLS error."
                          expressionType="Notify"
                          name="IgnoreCertificateErrors">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Allow unsecure ciphers/suites and curves for SSLS/TLS communication. Use this option to communicate with web servers which needs legacy / unsecured ciphers support. This option is only trigged when you change default SSL/TLS Version on advanced settings tab."
                          expressionType="Notify"
                          name="AllowUnsecureSuite">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Enable support for gzip or deflate compression. When you check this option compressed response automatically de-compressed saving bandwidth. This option is only valid if web server supports compressed response stream. Check your API documentation for more information."
                          expressionType="Notify"
                          name="EnableCompressionSupport">true</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies which security protocol is supported for HTTPS communication. Using this option you can enable legacy protocol or enforce to use latest version of security protocol (Note: TLS 1.2 is only supported in SSIS 2014 or Higher)."
                          expressionType="Notify"
                          name="SecurityProtocol"
                          typeConverter="ZappySys.PowerPack.Common.HttpsSecurityProtocolType">0</property>
                        <property
                          dataType="System.Int32"
                          description="Wait time in milliseconds (Pause after each request). 0=No wait. Use this delay time if your API has limit on how many requests you can make in certain time frame."
                          expressionType="Notify"
                          name="WaitTime">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you redirect error to error output by default you get additional information in ErrorMessage column. Check this option if you need exact Response Body (Useful if its in JSON/XML format which needs to be parsed for additional information for later step)."
                          expressionType="Notify"
                          name="OnErrorOutputResponseBody">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Enable multiple requests using parallel threads."
                          expressionType="Notify"
                          name="EnableParallelRequests">true</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum parallel threads to use for processing multiple web requests."
                          expressionType="Notify"
                          name="MaxParallelThreads">10</property>
                        <property
                          dataType="System.Boolean"
                          description="By default one request is sent for each input row. If your API supports multiple records in a single call via HTTP Body then enable this setting. See also BodyBatchSize, BodyHeader, BodyFooter and BodyRowSeparator property."
                          expressionType="Notify"
                          name="EnableBodyBatch">false</property>
                        <property
                          dataType="System.String"
                          description="When you have to wrap input content between opening and closing tags for each call then set this property to specify opening for body content. For Example if you want to build Body like this (send max 100 rows per call) ==&gt; { records : [ {...}, {...}, {...} ] } then you can set BatchSize=100, BodyHeader as &quot;{ records: [&quot; , BodyFooter as &quot;] }&quot; and BodyRowSeperator as comma {,}. This property is ignored if EnableBodyBatch=false."
                          expressionType="Notify"
                          name="BodyHeader"></property>
                        <property
                          dataType="System.String"
                          description="When you have to wrap input content between opening and closing tags for each call then set this property to specify closing for body content. For Example if you want to build Body like this (send max 100 rows per call) ==&gt; { records : [ {...}, {...}, {...} ] } then you can set BatchSize=100, BodyHeader as &quot;{ records: [&quot; , BodyFooter as &quot;] }&quot; and BodyRowSeperator as comma {,}. This property is ignored if EnableBodyBatch=false."
                          expressionType="Notify"
                          name="BodyFooter"></property>
                        <property
                          dataType="System.Int32"
                          description="If your API supports multiple records via HTTP Body then change this setting &gt; 1 to include multiple upstream records into single call. See also BodyHeader, BodyFooter and BodyRowSeparator property. This property is ignored if EnableBodyBatch=false."
                          expressionType="Notify"
                          name="BodyBatchSize">100</property>
                        <property
                          dataType="System.String"
                          description="When you submit multiple rows in a batch you can separate multiple documents / records using custom separator (e.g. in JSON Array you can use comma {,} as record separator if POST document is in array format [ {...}, {...}, {...} ] ). For last row of batch blank separator is used."
                          expressionType="Notify"
                          name="BodyRowSeparator"></property>
                        <property
                          dataType="System.Boolean"
                          description="Returns response data as binary data (e.g. Byte Array). Check this option is response is Zip file, Image file or any non text data which needs to be exported as raw data without any encoding."
                          expressionType="Notify"
                          name="TreatResponseAsBinary">false</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.WebApiDestination</property>
                        <property
                          dataType="System.Boolean"
                          description="Check this option if you want to upload file(s) (i.e. POST RAW file data) or send data using Multi-Part encoding method (i.e. Content-Type: multipart/form-data). Multi-Part request allows you to mix key/value and upload files in same request. On the other hand raw upload allows only single file upload (without any key/value) &#xA;&#xA;==== Raw Upload (Content-Type: application/octet-stream) =====   &#xA;To upload single file in raw mode check this option and specify full file path starting with @ sign in the Body (e.g.  @c:\data\myfile.zip ) &#xA;&#xA;==== Form-Data / Multipart Upload (Content-Type: multipart/form-data) =====   &#xA;To treat your Request data as multi part fields you must specify key/value pairs separated by new lines into RequestData field (i.e. Body). Each key value pair is entered on new-line and key/value are separated using equal sign (=). Preceding and trailing spaces are ignored also blank lines are ignored. &#xA;If field value has some any special character(s) then use escape sequence (e.g. For NewLine: \r\n, For Tab: \t, For at (@): \@). When value of any field starts with at sign (@) its automatically treated as File you want to upload. By default file content type is determined based on extension however you can supply content type manually for any field using this way [ fieldname.Content-Type=some content type ]. In below example we have supplied Content-Type for file2 and SomeField1, all other fields are using default content-type.&#xA;See below Example of uploading multiple files along with additional fields.&#xA;&#xA;file1=@c:\data\Myfile1.txt&#xA;file2=@c:\data\Myfile2.json&#xA;file2.Content-Type=application/json&#xA;SomeField1=aaaaaaa&#xA;SomeField1.Content-Type=text/plain&#xA;SomeField2=12345&#xA;SomeFieldWithNewLineAndTab=This is line1\r\nThis is line2\r\nThis is \ttab \ttab \ttab&#xA;SomeFieldStartingWithAtSign=\@MyTwitterHandle&#xA;"
                          expressionType="Notify"
                          name="IsMultiPartUpload">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Enable this option if your server is expecting &#xA; (i.e. CRLF) after last Multi-Part boundary in the Body. This option is only applicable if you enabled IsMultiPartUpload and sending data in Key=value format (i.e. Mutipart). For raw file upload this option has no effect."
                          expressionType="Notify"
                          name="AddMultiPartPostamble">false</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Connections[Connection]"
                          connectionManagerID="Package.ConnectionManagers[HTTP 1]"
                          connectionManagerRefId="Package.ConnectionManagers[HTTP 1]"
                          description="Connection manager for authentication (e.g. HTTP or OAuth Connection)"
                          name="Connection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput]"
                          errorRowDisposition="RedirectRow"
                          hasSideEffects="true"
                          name="WebApiDestinationInput"
                          truncationRowDisposition="RedirectRow">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput].Columns[TemplateOutput]"
                              cachedDataType="nText"
                              cachedName="TemplateOutput"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpRequestData]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Outputs[TemplateTransformOutput].Columns[TemplateOutput]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpRequestUrl]"
                              dataType="wstr"
                              length="2000"
                              name="HttpRequestUrl" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpRequestData]"
                              dataType="nText"
                              name="HttpRequestData" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput].ExternalColumns[HttpHeaders]"
                              dataType="wstr"
                              length="2000"
                              name="HttpHeaders" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="WebApiDestination Error Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="128"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorColumnName]"
                              name="ErrorColumnName" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorMessage]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output].Columns[ErrorMessage]"
                              name="ErrorMessage" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output]"
                          exclusionGroup="1"
                          name="Response Output"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output].Columns[ResponseText]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output].Columns[ResponseText]"
                              name="ResponseText" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output].Columns[StatusCode]"
                              name="StatusCode" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="JSON Parser Transform; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="Parse incoming JSON String into columns. You can also parse and transform single JSON record into multiple rows by filtering data based on JSON Path (e.g. $.Customer.Orders[*])"
                      name="Read ContactId"
                      usesDispositions="true"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for any numeric data types"
                          expressionType="Notify"
                          name="TreatBlankNumberAsNull">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for bool data types"
                          expressionType="Notify"
                          name="TreatBlankBoolAsNull">true</property>
                        <property
                          dataType="System.Boolean"
                          description="Treat empty string as NULL for any date/time data types"
                          expressionType="Notify"
                          name="TreatBlankDateAsNull">true</property>
                        <property
                          dataType="System.Int32"
                          description="Encoding of source file"
                          expressionType="Notify"
                          name="Encoding"
                          typeConverter="ZappySys.Common.EncodingType">0</property>
                        <property
                          dataType="System.String"
                          description="Character set for text (e.g. utf-8 )"
                          expressionType="Notify"
                          name="CharacterSet"></property>
                        <property
                          dataType="System.String"
                          description="Sample JSON data used to parse output columns."
                          expressionType="Notify"
                          name="SampleData"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">{
    "result": 1,
    "error": null
}</property>
                        <property
                          dataType="System.Boolean"
                          description="Include all upstream parent columns into output except the one you selected to parse. By default only parsed columns from Input document is included in the output. If you wish to include all other upstream columns in the output too then check this option."
                          expressionType="Notify"
                          name="OutputAllUpstreamColumns">true</property>
                        <property
                          dataType="System.Int32"
                          description="Defines how to handle empty input. By default NULL or Empty input is skipped from parsing."
                          expressionType="Notify"
                          name="EmptyInputProcessingMode"
                          typeConverter="ZappySys.Common.Data.EmptyInputProcessingMode">0</property>
                        <property
                          dataType="System.String"
                          description="Defines how to handle empty input. By default NULL or Empty input is skipped from parsing."
                          expressionType="Notify"
                          name="TreatEmptyInputAs">{ }</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum JSON records to fetch. Set this value to 0 for all records"
                          expressionType="Notify"
                          name="MaxRows">0</property>
                        <property
                          dataType="System.String"
                          description="Enter expression here to filter data.(Example:  $.Users[*].UserName ) This will fetch User names from users records"
                          expressionType="Notify"
                          name="Filter"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Boolean"
                          description="Use this option to include parent properties (Non array) in the output along with Filtered Rows"
                          expressionType="Notify"
                          name="IncludeParentColumns">true</property>
                        <property
                          dataType="System.Boolean"
                          description="By default child and parent information is not included in the output if children not found for specified expression. For example if you want to extract all orders from all customers nodes then you can type $.Customers[*].Orders[*]. This will fetch all orders from all customers. By default customers records without orders wont be included in the output. If you want to include those customers where orders not found then check this option (Output null information for order attributes). This behavior is similar to LEFT OUTER JOIN in SQL (Left side is parent, right side is child). This option is ***resource intensive*** so only check if you really care about this behavior."
                          expressionType="Notify"
                          name="IncludeParentColumnsWhenChildMissing">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Set this option to true if you want to output parent columns which are array. By default any parent column which is an array is not included in output. See also FilterForParentColumnsWithArrayType property if you set this property"
                          expressionType="Notify"
                          name="IncludeParentColumnsWithArrayType">false</property>
                        <property
                          dataType="System.String"
                          description="Filter expression to extract value form parent"
                          expressionType="Notify"
                          name="FilterForParentColumnsWithArrayType"></property>
                        <property
                          dataType="System.String"
                          description="Prefix for parent column name. This option is only valid if you have set IncludeParentColumns=True"
                          expressionType="Notify"
                          name="ParentColumnPrefix">P_</property>
                        <property
                          dataType="System.Boolean"
                          description="Throw error if property name specified in filter expression is missing. By default it will ignore any missing property errors."
                          expressionType="Notify"
                          name="ThrowErrorIfPropertyMissing">false</property>
                        <property
                          dataType="System.Int32"
                          description="This property how many nested levels should be scanned to fetch various properties. 0=Scan all child levels."
                          expressionType="Notify"
                          name="MaxLevelsToScan">0</property>
                        <property
                          dataType="System.String"
                          description="List comma separated property names from JSON document which you want to exclude from output. Specify parent property name to exclude all child nodes."
                          expressionType="Notify"
                          name="ExcludedProperties"></property>
                        <property
                          dataType="System.String"
                          description="Property level separator used in generated property name (separator for outer properties - Above selected filter node). Use this if default separator is producing duplicate property name which is conflicting with existing name."
                          expressionType="Notify"
                          name="LevelSeparator">_</property>
                        <property
                          dataType="System.Boolean"
                          description="Enables deep array flattening for selected filtered hierarchy. When you turn on this property it will flatten each property of each array item and expose as column (e.g. If you have Filter set as $.customers[*] and for each customer you have an array of Addresses then you may see output columns like Addresses.1.City, Addresses.1.State, Addresses.2.City, Addresses.2.State .... Addresses.N.City, Addresses.N.State). You can control how many array items you want to flatten by setting MaxArrayItemsToFlatten property."
                          expressionType="Notify"
                          name="EnableArrayFlattening">false</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum number of array items to flatten. inner array flattening. Adjust this property to control how many columns being generated. This option is ignored if you set EnableArrayFlattening=false"
                          expressionType="Notify"
                          name="MaxArrayItemsToFlatten">10</property>
                        <property
                          dataType="System.String"
                          description="Specifies how custom date formatted strings are parsed when reading JSON."
                          expressionType="Notify"
                          name="DateFormatString"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies how date formatted strings, e.g. Date(1198908717056) and 2012-03-21T05:40Z, are parsed when reading JSON."
                          expressionType="Notify"
                          name="DateParseHandling"
                          typeConverter="ZappySys.Common.DateParseHandling">1</property>
                        <property
                          dataType="System.Boolean"
                          description="Indent JSON output so its easy to read."
                          expressionType="Notify"
                          name="IndentOutput">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Output as raw JSON document rather than parsing individual fields. This option is helpful if you have documents stored in a file and you want to pass them downstream as raw JSON string rather than parsing into columns."
                          expressionType="Notify"
                          name="OutputRawDocument">false</property>
                        <property
                          dataType="System.Boolean"
                          description="When this property is true then Column is converted to Row. Pivoted names will appear under  Pivot_Name column and values will appear under Pivot_Value field."
                          expressionType="Notify"
                          name="EnablePivot">false</property>
                        <property
                          dataType="System.Int32"
                          description="Array Transformation you want to apply. Useful for case when you have 2-Dimensional arrays with rows/columns in separate arrays."
                          expressionType="Notify"
                          name="ArrayTransformationType"
                          typeConverter="ZappySys.Json.ArrayTransformType">0</property>
                        <property
                          dataType="System.String"
                          description="Filter expression to use to extract column names for array transformation."
                          expressionType="Notify"
                          name="ArrayTransColumnNameFilter"></property>
                        <property
                          dataType="System.String"
                          description="Filter expression for row values (Not applicable for simple array transformation)."
                          expressionType="Notify"
                          name="ArrayTransRowValueFilter"></property>
                        <property
                          dataType="System.Boolean"
                          description="When you have 2D array but don't have column list specified in a separate array then use this option (e.g. { arr: [[10,11],[21,22]] } ). If you selected Column less array or JSON Lines option then this property means Column Names coming from First Line of array."
                          expressionType="Notify"
                          name="ArrayTransEnableCustomColumns">false</property>
                        <property
                          dataType="System.String"
                          description="When you have 2D array but don't have column list specified in a separate array then use specify column names here. Use comma separated list (e.g col1,col2,col3 ). Column name Order must match value order."
                          expressionType="Notify"
                          name="ArrayTransCustomColumns"></property>
                        <property
                          dataType="System.Int32"
                          description="Metadata scan mode controls how data type and length is determined. By default few records scanned to determine datatype/length. Changing ScanMode affects length/datatype accuracy."
                          expressionType="Notify"
                          name="MetaDataScanMode"
                          typeConverter="ZappySys.Common.Data.MetaDataScanMode">4</property>
                        <property
                          dataType="System.Int32"
                          description="Length for all string column. This option is only valid for MetaDataScanMode=Custom"
                          expressionType="Notify"
                          name="MetaDataCustomLength">1000</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.JsonParserTransform</property>
                        <property
                          dataType="System.Boolean"
                          name="EnableBigNumberHandling">false</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput]"
                          errorRowDisposition="FailComponent"
                          name="JsonParserTransformInput"
                          truncationRowDisposition="FailComponent">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[ResponseText]"
                              cachedDataType="nText"
                              cachedName="ResponseText"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output].Columns[ResponseText]" />
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[Id]"
                              cachedDataType="i4"
                              cachedName="Id"
                              cachedSortKeyPosition="1"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[Id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[Id]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[AccountId]"
                              cachedDataType="i2"
                              cachedName="AccountId"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output].Columns[AccountId]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[AccountId]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[StatusCode]"
                              cachedDataType="i4"
                              cachedName="StatusCode"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output].Columns[StatusCode]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[StatusCode]">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  expressionType="Notify"
                                  name="IncludeDownStream">true</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True" />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput]"
                          errorOrTruncationOperation="Error"
                          errorRowDisposition="FailComponent"
                          name="JsonParserTransformOutput"
                          truncationRowDisposition="FailComponent">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[StatusCode]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[StatusCode]"
                              name="StatusCode" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              dataType="nText"
                              description="Template output column which will contain replaced text."
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[TemplateOutput]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\181:invalid"
                              name="TemplateOutput" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[ApplicantStatus]"
                              dataType="wstr"
                              length="200"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[ApplicantStatus]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\179:invalid"
                              name="ApplicantStatus" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[etag_contact]"
                              dataType="wstr"
                              length="250"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[etag_contact]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\177:invalid"
                              name="etag_contact" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[AccountId]"
                              dataType="i2"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[AccountId]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[AccountId]"
                              name="AccountId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[Id]"
                              mappedColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[error]"
                              dataType="wstr"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].ExternalColumns[error]"
                              length="1020"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[error]"
                              name="error" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[result]"
                              dataType="i8"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].ExternalColumns[result]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[result]"
                              name="result" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].ExternalColumns[result]"
                              dataType="i8"
                              name="result" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].ExternalColumns[error]"
                              dataType="wstr"
                              length="1020"
                              name="error" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output]"
                          isErrorOut="true"
                          name="JsonParserTransform Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[StatusCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[StatusCode]"
                              name="StatusCode" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[TemplateOutput]"
                              name="TemplateOutput" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ApplicantStatus]"
                              dataType="wstr"
                              length="200"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ApplicantStatus]"
                              name="ApplicantStatus" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[etag_contact]"
                              dataType="wstr"
                              length="250"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[etag_contact]"
                              name="etag_contact" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[AccountId]"
                              dataType="i2"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[AccountId]"
                              name="AccountId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[error]"
                              dataType="wstr"
                              length="1020"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[error]"
                              name="error" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[result]"
                              dataType="i8"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[result]"
                              name="result" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]"
                              codePage="1252"
                              dataType="str"
                              length="128"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorColumnName]"
                              name="ErrorColumnName" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]"
                              dataType="wstr"
                              length="1024"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorMessage]"
                              name="ErrorMessage" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]"
                              dataType="nText"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransform Error Output].Columns[ErrorRawData]"
                              name="ErrorRawData" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Set Variable Transform; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="Set Variable with multiple operations such as Set, Increment, Replace, Append"
                      name="Set JSON Error"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.Int32"
                          description="Action you like to perform. If you set any action with ReplacePlaceholder then you must use placeholder &lt;%value%&gt; where you like to insert upstream value. Use variable placeholder (e.g. {{User::MyVar}} ) if you wish to replace value from variable. Example for placeholder use: { tags : [&lt;%value%&gt;] , Package: &quot;{{System::PackageName}}&quot; }"
                          expressionType="Notify"
                          name="VariableSetMode"
                          typeConverter="ZappySys.PowerPack.Common.VariableSetMode">0</property>
                        <property
                          dataType="System.String"
                          description="Name of variable you want to set (e.g. User::vMyData)"
                          expressionType="Notify"
                          name="VariableToSet"
                          typeConverter="ZappySys.PowerPack.Converters.VariableEditor,ZappySys.PowerPack130.UI,Version=1.0.0.0,Culture=neutral,PublicKeyToken=1903265a93eae502">User::APIErrorResp</property>
                        <property
                          dataType="System.Int32"
                          description="Number to add in previous variable value (This number can be -ve or +ve)"
                          expressionType="Notify"
                          name="IncrementBy">1</property>
                        <property
                          dataType="System.String"
                          description="Separator to use for Append mode (not valid for other mode). You can use \r\n for new line, \t for tab, \n for unix style new line."
                          expressionType="Notify"
                          name="RowSeparator">\r\n</property>
                        <property
                          dataType="System.String"
                          description="Separator to use for last row (Only valid of ."
                          expressionType="Notify"
                          name="LastRowSeparator"></property>
                        <property
                          dataType="System.String"
                          description="Header string to use for Append mode."
                          expressionType="Notify"
                          name="Header"></property>
                        <property
                          dataType="System.String"
                          description="Footer string to use for Append mode."
                          expressionType="Notify"
                          name="Footer"></property>
                        <property
                          dataType="System.Boolean"
                          description="By default SSIS doesn't allow to assign NULL value to SSIS Variable. Turn on this setting to use custom value for NULL. Set CustomValueForNull as well to use custom value for NULL"
                          expressionType="Notify"
                          name="UseCustomValueForNull">false</property>
                        <property
                          dataType="System.String"
                          description="If you set UseCustomValueForNull=true then this Custom Value will be used when NULL value is detected as input. If you leave CustomValueForNull blank then we will change NULL string to Blank, NULL Int32,Int64,Decimal,Double use 0"
                          expressionType="Notify"
                          name="CustomValueForNull"></property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.SetVariableTransform</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error.Inputs[SetVariableTransformInput]"
                          name="SetVariableTransformInput">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error.Inputs[SetVariableTransformInput].Columns[error]"
                              cachedDataType="wstr"
                              cachedLength="1020"
                              cachedName="error"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput].Columns[error]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error.Outputs[SetVariableTransformOutput]"
                          errorOrTruncationOperation="Error"
                          name="SetVariableTransformOutput"
                          synchronousInputId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error.Inputs[SetVariableTransformInput]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts"
                      componentClassID="Microsoft.OLEDBSource"
                      contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                      description="OLE DB Source"
                      name="Solicitors in use from Contacts"
                      usesDispositions="true"
                      version="7">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">SELECT DISTINCT 
       conveyancerid AS Id, 
       AccountId
FROM [Entities].[dbo].[vwContacts] cb2 WITH(NOLOCK)
WHERE conveyancerid IS NOT NULL
      AND AccountId = ?
ORDER BY  conveyancerid asc</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">2</property>
                        <property
                          dataType="System.String"
                          description="The mappings between the parameters in the SQL command and variables."
                          name="ParameterMapping">"Parameter0:Input",{354D1EFB-82E3-429A-AE25-A8E9A60FBDAE};</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          connectionManagerRefId="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output]"
                          isSorted="true"
                          name="OLE DB Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].Columns[Id]"
                              dataType="i4"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].ExternalColumns[Id]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].Columns[Id]"
                              name="Id"
                              sortKeyPosition="1"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].Columns[AccountId]"
                              dataType="i2"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].ExternalColumns[AccountId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].Columns[AccountId]"
                              name="AccountId"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].ExternalColumns[Id]"
                              dataType="i4"
                              name="Id" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output].ExternalColumns[AccountId]"
                              dataType="i2"
                              name="AccountId" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output]"
                          isErrorOut="true"
                          name="OLE DB Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[Id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[Id]"
                              name="Id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[AccountId]"
                              dataType="i2"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[AccountId]"
                              name="AccountId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings"
                      componentClassID="Microsoft.OLEDBSource"
                      contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                      description="OLE DB Source"
                      name="Solicitors in use from Listings"
                      usesDispositions="true"
                      version="7">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">SELECT DISTINCT 
       l.[legal_solicitor_id] AS id, 
       AccountId
FROM [Entities].[dbo].[vwListing] l WITH(NOLOCK)
WHERE l.[legal_solicitor_id] IS NOT NULL
      AND l.accountid = ?
ORDER BY l.[legal_solicitor_id];</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">2</property>
                        <property
                          dataType="System.String"
                          description="The mappings between the parameters in the SQL command and variables."
                          name="ParameterMapping">"Parameter0:Input",{354D1EFB-82E3-429A-AE25-A8E9A60FBDAE};</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          connectionManagerRefId="Package.ConnectionManagers[colsqlbi01v.Entities]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output]"
                          isSorted="true"
                          name="OLE DB Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].Columns[AccountId]"
                              dataType="i2"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].ExternalColumns[AccountId]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].Columns[AccountId]"
                              name="AccountId"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].Columns[id]"
                              dataType="i4"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].ExternalColumns[id]"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].Columns[id]"
                              name="id"
                              sortKeyPosition="1"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].ExternalColumns[AccountId]"
                              codePage="1252"
                              dataType="str"
                              length="4"
                              name="AccountId" />
                            <externalMetadataColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output].ExternalColumns[id]"
                              dataType="i4"
                              name="id" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output]"
                          isErrorOut="true"
                          name="OLE DB Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[id]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[id]"
                              name="id" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[AccountId]"
                              codePage="1252"
                              dataType="str"
                              length="4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[AccountId]"
                              name="AccountId" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Trash Destination"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath"></property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">false</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                    <component
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination 1"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Trash Destination; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support"
                      description="The trash destination is used to create dummy destination which ends data path without any processing."
                      name="Trash Destination 1"
                      version="2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="LoggingMode determines how much information is logged during Package Execution. Set Logging mode to Debugging for maximum log."
                          expressionType="Notify"
                          name="LoggingMode"
                          typeConverter="ZappySys.PowerPack.Common.LoggingMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="When you enable this property it will prefix timestamp before Log messages."
                          expressionType="Notify"
                          name="PrefixTimestamp">false</property>
                        <property
                          dataType="System.Null"
                          expressionType="Notify"
                          name="SelfRef"
                          typeConverter="NOTBROWSABLE" />
                        <property
                          dataType="System.String"
                          description="File path where you want to save data"
                          expressionType="Notify"
                          name="FilePath"></property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates if you want to save input data to comma separated text file"
                          expressionType="Notify"
                          name="SaveDataToFile">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Append data to file"
                          expressionType="Notify"
                          name="Append">false</property>
                        <property
                          dataType="System.String"
                          description="RowSeparator"
                          expressionType="Notify"
                          name="RowSeparator">{NEWLINE}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether you want to overwrite target file if exists"
                          expressionType="Notify"
                          name="OverwriteFileIfExists">true</property>
                        <property
                          dataType="System.String"
                          description="ColumnSeparator"
                          expressionType="Notify"
                          name="ColumnSeparator">,</property>
                        <property
                          dataType="System.Boolean"
                          description="SupportUnicode"
                          expressionType="Notify"
                          name="SupportUnicode">true</property>
                        <property
                          dataType="System.Boolean"
                          description="ColumnNamesInFirstRow"
                          expressionType="Notify"
                          name="ColumnNamesInFirstRow">true</property>
                        <property
                          dataType="System.Boolean"
                          description="QuoteDataIfNeeded"
                          expressionType="Notify"
                          name="QuoteDataIfNeeded">true</property>
                        <property
                          dataType="System.String"
                          description="Date time format string for any column with DT_DBDATETIME, DT_DBDATETIME2 or DB_DATE format"
                          expressionType="Notify"
                          name="DateTimeFormat">yyyy-MM-dd HH:mm:ss</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">ZappySys.TrashDestination</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination 1.Inputs[TrashDestinationInput]"
                          hasSideEffects="true"
                          name="TrashDestinationInput">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Case 1]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Inputs[Derived Column Input]"
                      name="Case 1"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Case 1]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Case 11]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\CSV Preview.Inputs[TrashDestinationInput]"
                      name="Case 1"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Case 1]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error.Inputs[SetVariableTransformInput]"
                      name="Conditional Split Default Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Outputs[Conditional Split Default Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output3]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Inputs[Derived Column Input]"
                      name="Conditional Split Default Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[Conditional Split Default Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output2]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Inputs[TemplateTransformInput]"
                      name="Conditional Split Default Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Outputs[Conditional Split Default Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output1]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2.Inputs[TrashDestinationInput]"
                      name="Conditional Split Default Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[Conditional Split Default Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Derived Column Output1]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1.Inputs[TrashDestinationInput]"
                      name="Derived Column Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Derived Column Output2]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Inputs[Conditional Split Input]"
                      name="Derived Column Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Derived Column Output]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record.Inputs[OLE DB Destination Input]"
                      name="Derived Column Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[JsonParserTransformOutput]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split.Inputs[Conditional Split Input]"
                      name="JsonParserTransformOutput"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Outputs[JsonParserTransformOutput]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Merge Join Output]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Inputs[Conditional Split Input]"
                      name="Merge Join Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Outputs[Merge Join Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Merge Join Output1]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1.Inputs[Derived Column Input]"
                      name="Merge Join Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Outputs[Merge Join Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[No sol found]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1.Inputs[Conditional Split Input]"
                      name="No sol found"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2.Outputs[No sol found]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[No Solicitor Found]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Left Input]"
                      name="No Solicitor Found"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1.Outputs[No Solicitor Found]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[OLE DB Source Output1]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Right Input]"
                      name="OLE DB Source Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts.Outputs[OLE DB Source Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[OLE DB Source Output2]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1.Inputs[Merge Join Right Input]"
                      name="OLE DB Source Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings.Outputs[OLE DB Source Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[OLE DB Source Output]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join.Inputs[Merge Join Left Input]"
                      name="OLE DB Source Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL.Outputs[OLE DB Source Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Response Output]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId.Inputs[JsonParserTransformInput]"
                      name="Response Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[Response Output]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[SetVariableTransformOutput]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination 1.Inputs[TrashDestinationInput]"
                      name="SetVariableTransformOutput"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error.Outputs[SetVariableTransformOutput]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[TemplateTransformOutput]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Inputs[WebApiDestinationInput]"
                      name="TemplateTransformOutput"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState.Outputs[TemplateTransformOutput]" />
                    <path
                      refId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[WebApiDestination Error Output]"
                      endId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination.Inputs[TrashDestinationInput]"
                      name="WebApiDestination Error Output"
                      startId="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request.Outputs[WebApiDestination Error Output]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Iterate Offices\Sequence Container\Set SSIS Variables From XML"
              DTS:CreationName="ZappySys.XmlParserTask"
              DTS:Description="ZS Xml Parser Task"
              DTS:DTSID="{4F4637C4-F7FE-4CAB-8442-894135504BC3}"
              DTS:ExecutableType="ZappySys.XmlParserTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Set SSIS Variables From XML"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <XmlParserTask
                  SourceAccessMode="Connection"
                  SourceVariable=""
                  SourceConnection="{1B8B2A3A-0640-48A6-BD0C-C18168648008}"
                  SourceDirectValue="&lt;!-- &#xA;Using XML Parser Task you can extract values from XML document using XPath Expression &#xA;See example in below grid. Read description for each mapping.&#xA;See more examples: https://msdn.microsoft.com/en-us/library/ms256086(v=vs.110).aspx&#xA;--&gt;&#xA;&lt;catalog&gt;&#xA;   &lt;book id=&quot;bk101&quot;&gt;&#xA;      &lt;author&gt;Gambardella, Matthew&lt;/author&gt;&#xA;      &lt;title&gt;XML Developer's Guide&lt;/title&gt;&#xA;      &lt;genre&gt;Computer&lt;/genre&gt;&#xA;      &lt;price&gt;44.95&lt;/price&gt;&#xA;      &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;&#xA;      &lt;description&gt;An in-depth look at creating applications &#xA;      with XML.&lt;/description&gt;&#xA;   &lt;/book&gt;&#xA;   &lt;book id=&quot;bk102&quot;&gt;&#xA;      &lt;author&gt;Ralls, Kim&lt;/author&gt;&#xA;      &lt;title&gt;Midnight Rain&lt;/title&gt;&#xA;      &lt;genre&gt;Fantasy&lt;/genre&gt;&#xA;      &lt;price&gt;5.95&lt;/price&gt;&#xA;      &lt;publish_date&gt;2000-12-16&lt;/publish_date&gt;&#xA;      &lt;description&gt;A former architect battles corporate zombies, &#xA;      an evil sorceress, and her own childhood to become queen &#xA;      of the world.&lt;/description&gt;&#xA;   &lt;/book&gt;&#xA;   &lt;book id=&quot;bk103&quot;&gt;&#xA;      &lt;author&gt;Corets, Eva&lt;/author&gt;&#xA;      &lt;title&gt;Maeve Ascendant&lt;/title&gt;&#xA;      &lt;genre&gt;Fantasy&lt;/genre&gt;&#xA;      &lt;price&gt;5.95&lt;/price&gt;&#xA;      &lt;publish_date&gt;2000-11-17&lt;/publish_date&gt;&#xA;      &lt;description&gt;After the collapse of a nanotechnology &#xA;      society in England, the young survivors lay the &#xA;      foundation for a new society.&lt;/description&gt;&#xA;   &lt;/book&gt;&#xA;   &lt;book id=&quot;bk104&quot;&gt;&#xA;      &lt;author&gt;Corets, Eva&lt;/author&gt;&#xA;      &lt;title&gt;Oberon's Legacy&lt;/title&gt;&#xA;      &lt;genre&gt;Fantasy&lt;/genre&gt;&#xA;      &lt;price&gt;5.95&lt;/price&gt;&#xA;      &lt;publish_date&gt;2001-03-10&lt;/publish_date&gt;&#xA;      &lt;description&gt;In post-apocalypse England, the mysterious &#xA;      agent known only as Oberon helps to create a new life &#xA;      for the inhabitants of London. Sequel to Maeve &#xA;      Ascendant.&lt;/description&gt;&#xA;   &lt;/book&gt;&#xA;&lt;/catalog&gt;"
                  TargetSettings="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;XmlParserSetting xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&lt;Mappings&gt;&lt;XmlParserMapping&gt;&lt;Path&gt;/SSISVariables/RexAPIWebURL&lt;/Path&gt;&lt;Target&gt;User::RexAPIWebURL&lt;/Target&gt;&lt;Required&gt;true&lt;/Required&gt;&lt;Description /&gt;&lt;/XmlParserMapping&gt;&lt;XmlParserMapping&gt;&lt;Path&gt; /SSISVariables/PackageUser&lt;/Path&gt;&lt;Target&gt;User::PackageUser&lt;/Target&gt;&lt;Required&gt;true&lt;/Required&gt;&lt;Description /&gt;&lt;/XmlParserMapping&gt;&lt;XmlParserMapping&gt;&lt;Path&gt;/SSISVariables/PackageErrorEmail&lt;/Path&gt;&lt;Target&gt;User::PackageErrorEmail&lt;/Target&gt;&lt;Required&gt;true&lt;/Required&gt;&lt;Description /&gt;&lt;/XmlParserMapping&gt;&lt;XmlParserMapping&gt;&lt;Path&gt;/SSISVariables/PackagePassword&lt;/Path&gt;&lt;Target&gt;User::PackagePassword&lt;/Target&gt;&lt;Required&gt;true&lt;/Required&gt;&lt;Description /&gt;&lt;/XmlParserMapping&gt;&lt;XmlParserMapping&gt;&lt;Path&gt;/SSISVariables/RexAPIWebURLv1&lt;/Path&gt;&lt;Target&gt;User::RexAPIWebURLv1&lt;/Target&gt;&lt;Required&gt;true&lt;/Required&gt;&lt;Description /&gt;&lt;/XmlParserMapping&gt;&lt;/Mappings&gt;&lt;Path /&gt;&lt;/XmlParserSetting&gt;"
                  LogLevel="Normal"
                  PrefixTimestamp="False" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{99FB4DA6-556C-443E-B77A-3E5B3C05C6C7}"
              DTS:From="Package\Iterate Offices\Sequence Container\Set SSIS Variables From XML"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Iterate Offices\Sequence Container\Get Auth Key" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{E90E3B55-229C-4C78-A10C-3DECE4B3E14A}"
              DTS:From="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Iterate Offices\Sequence Container\Add note based on SQL log" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{E2297459-37D3-49DE-81C4-2EC3B3476A76}"
              DTS:From="Package\Iterate Offices\Sequence Container\Get Auth Key"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Iterate Offices\Sequence Container\Email Auth Failure"
              DTS:Value="1" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{F89DA0A5-ED4F-4992-9DE5-41A13C529A9B}"
              DTS:From="Package\Iterate Offices\Sequence Container\Get Auth Key"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{430C66E0-5588-4CBD-B9FB-B0A8F827B62B}"
          DTS:ObjectName="{430C66E0-5588-4CBD-B9FB-B0A8F827B62B}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::Office_id" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{64E916E2-CAA7-4970-8546-133672969BC0}"
          DTS:ObjectName="{64E916E2-CAA7-4970-8546-133672969BC0}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::RexAccountID" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 8 1]"
      DTS:CreationName=""
      DTS:DTSID="{1581D267-1024-46AA-B4FE-39B0D2E2D865}"
      DTS:From="Package\Get Office List"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 8 1"
      DTS:To="Package\Iterate Offices" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{6BDF1810-EE24-48C6-8871-32226C2B8F98}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{534D30FF-D1CD-415C-B488-6FC04B56A62B}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Email error"
          DTS:CreationName="ZappySys.HtmlEmailTask"
          DTS:Description="Email Auth Failure"
          DTS:DTSID="{0CA3AF2F-BFB2-47B5-8A47-E6D05F35A908}"
          DTS:ExecutableType="ZappySys.HtmlEmailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Email error"
          DTS:TaskContact="HTML Email Task; ZappySys LLC (c) All Rights Reserved; SSIS PowerPack; http://www.zappysys.com/support">
          <DTS:Variables />
          <DTS:ObjectData>
            <HtmlEmailTask
              SmtpConnection="SMTP"
              IsHtmlEmail="True"
              DefaultStyle="&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;body,div,p,span,td,th,table {&#xA; font-family: Helvetica, Arial, sans-serif;&#xA; font-size: 10pt; &#xA;}&#xA;h1,h2,h3,h4,h5{&#xA;font-family: Helvetica, Arial, sans-serif;&#xA;}&#xA;&#xA;table { &#xA; border-collapse: &#xA; collapse; border-spacing: 0; &#xA;}&#xA;&#xA;tr.odd    {background-color: #cccccc}&#xA;tr.even   {background-color: #fafafa}&#xA;td, th { border: 1px solid #bbb;padding: 5 5 5 5} &#xA;th { background: #F3F3F3;  font-weight: bold;}&#xA;&lt;/style&gt;&#xA;&#xA;"
              Subject="Error occured in {{System::PackageName}}"
              From="alerts@spicerhaart.co.uk"
              To="{{User::PackageErrorEmail}}"
              Cc=""
              ReplyTo=""
              Bcc=""
              Attachments=""
              EmailPriority="High"
              MessageSourceType="Direct"
              MessageDirectValue="&lt;p&gt;Error occured and could not be logged in database&lt;p /&gt;&#xA;&lt;br&gt;&#xA;&lt;p&gt;Error code: {{System::ErrorCode}}&lt;p /&gt;&#xA;&lt;br&gt;&#xA;&lt;p&gt;Error message: {{System::ErrorDescription}}&lt;p /&gt;"
              MessageFileConnection=""
              MessageVariable=""
              LogLevel="Normal"
              PrefixTimestamp="False" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Insert error log into database"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{AC7D2CCC-203E-4BBF-BABC-15D60119692F}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Insert error log into database"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1ACC4D99-A047-44CB-AAAD-088F42F69A23}"
              SQLTask:SqlStatementSource="INSERT INTO SSISErrorLog&#xA;(PackageName, StartTime, ErrorCode, ErrorDescription, AccountID)&#xA;VALUES&#xA;(?, ?, ?, ?, ?)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@PackageName"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@StartTime"
                SQLTask:DtsVariableName="System::StartTime"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ErrorCode"
                SQLTask:DtsVariableName="System::ErrorCode"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@ErrorDescription"
                SQLTask:DtsVariableName="User::APIErrorResp"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@AccountID"
                SQLTask:DtsVariableName="User::RexAccountID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package.EventHandlers[OnError].PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{655A1BC7-9B12-433C-A0C6-F8BF2B614101}"
          DTS:From="Package.EventHandlers[OnError]\Insert error log into database"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package.EventHandlers[OnError]\Email error"
          DTS:Value="1" />
      </DTS:PrecedenceConstraints>
    </DTS:EventHandler>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnTaskFailed]"
      DTS:CreationName="OnTaskFailed"
      DTS:DTSID="{C7B9C3CC-A7C5-4319-BBFA-EF541464945E}"
      DTS:EventID="0"
      DTS:EventName="OnTaskFailed"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{40CF4FE1-CF13-43FB-B707-21CD69E9E86E}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="145,42"
          Id="Package\Get Office List"
          TopLeft="163,5.5" />
        <NodeLayout
          Size="207,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log"
          TopLeft="236,308.5" />
        <NodeLayout
          Size="164,42"
          Id="Package\Iterate Offices\Sequence Container\Email Auth Failure"
          TopLeft="5.50000000000003,209.5" />
        <NodeLayout
          Size="141,42"
          Id="Package\Iterate Offices\Sequence Container\Get Auth Key"
          TopLeft="265,107.5" />
        <NodeLayout
          Size="269,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive"
          TopLeft="230,209.5" />
        <NodeLayout
          Size="216,42"
          Id="Package\Iterate Offices\Sequence Container\Set SSIS Variables From XML"
          TopLeft="227.5,5.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint]"
          TopLeft="335.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="364.5,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-24.9999999999999,57"
              Start="0,0"
              End="-24.9999999999999,49.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.5"
                    Point2="0,28.5"
                    Point3="-4,28.5" />
                  <mssgle:LineSegment
                    End="-20.9999999999999,28.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-20.9999999999999,28.5"
                    Point2="-24.9999999999999,28.5"
                    Point3="-24.9999999999999,32.5" />
                  <mssgle:LineSegment
                    End="-24.9999999999999,49.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="313.333333333333,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-225.833333333333,60"
              Start="0,0"
              End="-225.833333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4039270687237" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4039270687237"
                    Point2="0,24.4039270687237"
                    Point3="-4,24.4039270687237" />
                  <mssgle:LineSegment
                    End="-221.833333333333,24.4039270687237" />
                  <mssgle:CubicBezierSegment
                    Point1="-221.833333333333,24.4039270687237"
                    Point2="-225.833333333333,24.4039270687237"
                    Point3="-225.833333333333,28.4039270687237" />
                  <mssgle:LineSegment
                    End="-225.833333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-128.158014322917,29.4039270687237,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="361.083333333333,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="504,511"
          Size="504,554"
          Id="Package\Iterate Offices\Sequence Container"
          TopLeft="5.50000000000011,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="515,615"
          Size="515,658"
          Id="Package\Iterate Offices"
          TopLeft="5.50000000000006,107.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 8 1]"
          TopLeft="235.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="27.5,60"
              Start="0,0"
              End="27.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="4,30" />
                  <mssgle:LineSegment
                    End="23.5,30" />
                  <mssgle:CubicBezierSegment
                    Point1="23.5,30"
                    Point2="27.5,30"
                    Point3="27.5,34" />
                  <mssgle:LineSegment
                    End="27.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package.EventHandlers[OnError]\Email error"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="217,42"
          Id="Package.EventHandlers[OnError]\Insert error log into database"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="Package.EventHandlers[OnError].PrecedenceConstraints[Constraint]"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnTaskFailed]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="131,42"
          Id="{7B24456E-71A1-42ED-8BF3-CE0C7825D6DF}"
          TopLeft="203,130" />
        <NodeLayout
          Size="178,42"
          Id="{1F31AF16-4BD6-4A53-A279-CE4F8DEAF5C6}"
          TopLeft="179,23" />
        <EdgeLayout
          Id="{160B05A4-98A6-4E8D-887A-A70D0F08AA63}"
          TopLeft="268.25,65">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,65"
              Start="0,0"
              End="0,57.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,57.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <TaskHost
    design-time-name="Package\Iterate Offices\Sequence Container\Add note based on SQL log">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination"
          TopLeft="228,413.5" />
        <NodeLayout
          Size="175,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record"
          TopLeft="458.5,923.5" />
        <NodeLayout
          Size="143,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Read Success"
          TopLeft="24.5000000000001,413.5" />
        <NodeLayout
          Size="156,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Data Conversion"
          TopLeft="468,821.5" />
        <NodeLayout
          Size="170,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Post Batch Request"
          TopLeft="224,311.5" />
        <NodeLayout
          Size="161,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Extract contact id"
          TopLeft="242.5,515.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 3"
          TopLeft="5.50000000000011,719.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 1"
          TopLeft="10.5000000000001,515.5" />
        <NodeLayout
          Size="148,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build note text"
          TopLeft="235,107.5" />
        <NodeLayout
          Size="178,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Error Message Check"
          TopLeft="234,617.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Trash Destination 2"
          TopLeft="237.5,719.5" />
        <NodeLayout
          Size="253,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL"
          TopLeft="182.5,5.5" />
        <NodeLayout
          Size="156,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Build Note JSON"
          TopLeft="231,209.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Derived Column"
          TopLeft="469,719.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[WebApiDestination Error Output]"
          TopLeft="336,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-27,60"
              Start="0,0"
              End="-27,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3356643356643" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3356643356643"
                    Point2="0,24.3356643356643"
                    Point3="-4,24.3356643356643" />
                  <mssgle:LineSegment
                    End="-23,24.3356643356643" />
                  <mssgle:CubicBezierSegment
                    Point1="-23,24.3356643356643"
                    Point2="-27,24.3356643356643"
                    Point3="-27,28.3356643356643" />
                  <mssgle:LineSegment
                    End="-27,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-85.3215625,29.3356643356643,143.643125,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[TemplateTransformOutput]"
          TopLeft="309,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Response Output]"
          TopLeft="282,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-186,60"
              Start="0,0"
              End="-186,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3356643356643" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3356643356643"
                    Point2="0,24.3356643356643"
                    Point3="-4,24.3356643356643" />
                  <mssgle:LineSegment
                    End="-182,24.3356643356643" />
                  <mssgle:CubicBezierSegment
                    Point1="-182,24.3356643356643"
                    Point2="-186,24.3356643356643"
                    Point3="-186,28.3356643356643" />
                  <mssgle:LineSegment
                    End="-186,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[OLE DB Source Output]"
          TopLeft="309,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[JsonParserTransformOutput1]"
          TopLeft="323,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[JsonParserTransformOutput]"
          TopLeft="118.5,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="204.5,60"
              Start="0,0"
              End="204.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3983402489627" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3983402489627"
                    Point2="0,24.3983402489627"
                    Point3="4,24.3983402489627" />
                  <mssgle:LineSegment
                    End="200.5,24.3983402489627" />
                  <mssgle:CubicBezierSegment
                    Point1="200.5,24.3983402489627"
                    Point2="204.5,24.3983402489627"
                    Point3="204.5,28.3983402489627" />
                  <mssgle:LineSegment
                    End="204.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[JsonParserTransform Error Output]"
          TopLeft="73.5000000000001,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="22.5,60"
              Start="0,0"
              End="22.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3983402489627" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3983402489627"
                    Point2="0,24.3983402489627"
                    Point3="4,24.3983402489627" />
                  <mssgle:LineSegment
                    End="18.5,24.3983402489627" />
                  <mssgle:CubicBezierSegment
                    Point1="18.5,24.3983402489627"
                    Point2="22.5,24.3983402489627"
                    Point3="22.5,28.3983402489627" />
                  <mssgle:LineSegment
                    End="22.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-65.32806640625,29.3983402489627,153.1561328125,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Fail]"
          TopLeft="280.5,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-189.5,60"
              Start="0,0"
              End="-189.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.590405904059" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.590405904059"
                    Point2="0,20.590405904059"
                    Point3="-4,20.590405904059" />
                  <mssgle:LineSegment
                    End="-185.5,20.590405904059" />
                  <mssgle:CubicBezierSegment
                    Point1="-185.5,20.590405904059"
                    Point2="-189.5,20.590405904059"
                    Point3="-189.5,24.590405904059" />
                  <mssgle:LineSegment
                    End="-189.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-102.55712890625,25.590405904059,15.6142578125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Derived Column Output1]"
          TopLeft="546,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Derived Column Output]"
          TopLeft="309,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Data Conversion Output]"
          TopLeft="546,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Conditional Split Error Output]"
          TopLeft="323,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-65.69390625,20.4453125,131.3878125,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Add note based on SQL log.Paths[Conditional Split Default Output]"
          TopLeft="365.5,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="180.5,60"
              Start="0,0"
              End="180.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.590405904059" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.590405904059"
                    Point2="0,20.590405904059"
                    Point3="4,20.590405904059" />
                  <mssgle:LineSegment
                    End="176.5,20.590405904059" />
                  <mssgle:CubicBezierSegment
                    Point1="176.5,20.590405904059"
                    Point2="180.5,20.590405904059"
                    Point3="180.5,24.590405904059" />
                  <mssgle:LineSegment
                    End="180.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="19.63609375,25.590405904059,141.2278125,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Insert Action Record">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Iterate Offices\Sequence Container\Add note based on SQL log\Get Rosie Loaded Contacts from SQL">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="175,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record"
          TopLeft="239.5,1229.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split"
          TopLeft="249.5,1025.5" />
        <NodeLayout
          Size="152,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Read ContactId"
          TopLeft="251,923.5" />
        <NodeLayout
          Size="169,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL"
          TopLeft="5.5,5.5" />
        <NodeLayout
          Size="149,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Set JSON Error"
          TopLeft="40.5000000000002,1127.5" />
        <NodeLayout
          Size="217,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Post Contact Archive Request"
          TopLeft="218.5,821.5" />
        <NodeLayout
          Size="162,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination"
          TopLeft="28.0000000000001,923.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Trash Destination 1"
          TopLeft="7.50000000000017,1229.5" />
        <NodeLayout
          Size="204,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Build Contact ChangeState"
          TopLeft="225,719.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Derived Column"
          TopLeft="250,1127.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[WebApiDestination Error Output]"
          TopLeft="292.166666666667,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-183.166666666667,60.0000000000001"
              Start="0,0"
              End="-183.166666666667,52.5000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2634949679781" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2634949679781"
                    Point2="0,24.2634949679781"
                    Point3="-4,24.2634949679781" />
                  <mssgle:LineSegment
                    End="-179.166666666667,24.2634949679781" />
                  <mssgle:CubicBezierSegment
                    Point1="-179.166666666667,24.2634949679781"
                    Point2="-183.166666666667,24.2634949679781"
                    Point3="-183.166666666667,28.2634949679781" />
                  <mssgle:LineSegment
                    End="-183.166666666667,52.5000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-163.404895833333,29.2634949679781,143.643125,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[SetVariableTransformOutput]"
          TopLeft="115,1169.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-22,60"
              Start="0,0"
              End="-22,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-18,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-18,30"
                    Point2="-22,30"
                    Point3="-22,34" />
                  <mssgle:LineSegment
                    End="-22,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Response Output]"
          TopLeft="361.833333333333,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-34.8333333333333,60"
              Start="0,0"
              End="-34.8333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.263494967978" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.263494967978"
                    Point2="0,24.263494967978"
                    Point3="-4,24.263494967978" />
                  <mssgle:LineSegment
                    End="-30.8333333333333,24.263494967978" />
                  <mssgle:CubicBezierSegment
                    Point1="-30.8333333333333,24.263494967978"
                    Point2="-34.8333333333333,24.263494967978"
                    Point3="-34.8333333333333,28.263494967978" />
                  <mssgle:LineSegment
                    End="-34.8333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[JsonParserTransformOutput]"
          TopLeft="327,965.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Derived Column Output]"
          TopLeft="327,1169.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output]"
          TopLeft="302.5,1067.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-187.5,60"
              Start="0,0"
              End="-187.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.367816091954" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.367816091954"
                    Point2="0,24.367816091954"
                    Point3="-4,24.367816091954" />
                  <mssgle:LineSegment
                    End="-183.5,24.367816091954" />
                  <mssgle:CubicBezierSegment
                    Point1="-183.5,24.367816091954"
                    Point2="-187.5,24.367816091954"
                    Point3="-187.5,28.367816091954" />
                  <mssgle:LineSegment
                    End="-187.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-164.36390625,29.367816091954,141.2278125,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Case 1]"
          TopLeft="351.5,1067.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-24.4999999999999,60"
              Start="0,0"
              End="-24.4999999999999,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.367816091954" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.367816091954"
                    Point2="0,24.367816091954"
                    Point3="-4,24.367816091954" />
                  <mssgle:LineSegment
                    End="-20.4999999999999,24.367816091954" />
                  <mssgle:CubicBezierSegment
                    Point1="-20.4999999999999,24.367816091954"
                    Point2="-24.4999999999999,24.367816091954"
                    Point3="-24.4999999999999,28.367816091954" />
                  <mssgle:LineSegment
                    End="-24.4999999999999,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-27.4680859375,29.367816091954,30.436171875,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="164,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Conditional Split 1"
          TopLeft="477,617.5" />
        <NodeLayout
          Size="138,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\CSV Preview"
          TopLeft="490,719.5" />
        <NodeLayout
          Size="222,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts"
          TopLeft="235,5.5" />
        <NodeLayout
          Size="130,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join"
          TopLeft="281,107.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[OLE DB Source Output]"
          TopLeft="90,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="235.666666666667,60"
              Start="0,0"
              End="235.666666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5623100303951" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.5623100303951"
                    Point2="0,35.5623100303951"
                    Point3="4,35.5623100303951" />
                  <mssgle:LineSegment
                    End="231.666666666667,35.5623100303951" />
                  <mssgle:CubicBezierSegment
                    Point1="231.666666666667,35.5623100303951"
                    Point2="235.666666666667,35.5623100303951"
                    Point3="235.666666666667,39.5623100303951" />
                  <mssgle:LineSegment
                    End="235.666666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="102.379739583333,40.5623100303951,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[OLE DB Source Output1]"
          TopLeft="346,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="20.3333333333333,60"
              Start="0,0"
              End="20.3333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5623100303951" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.5623100303951"
                    Point2="0,35.5623100303951"
                    Point3="4,35.5623100303951" />
                  <mssgle:LineSegment
                    End="16.3333333333333,35.5623100303951" />
                  <mssgle:CubicBezierSegment
                    Point1="16.3333333333333,35.5623100303951"
                    Point2="20.3333333333333,35.5623100303951"
                    Point3="20.3333333333333,39.5623100303951" />
                  <mssgle:LineSegment
                    End="20.3333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-5.28692708333334,40.5623100303951,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="150,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 1"
          TopLeft="271,209.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Merge Join Output]"
          TopLeft="346,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.45359375,21.4658203125,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="216,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings"
          TopLeft="482,209.5" />
        <NodeLayout
          Size="139,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Merge Join 1"
          TopLeft="489.5,311.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[No Solicitor Found]"
          TopLeft="369.666666666667,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="167.5,60"
              Start="0,0"
              End="167.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.9691991786448" />
                  <mssgle:CubicBezierSegment
                    Point1="0,25.9691991786448"
                    Point2="0,29.9691991786448"
                    Point3="4,29.9691991786448" />
                  <mssgle:LineSegment
                    End="163.5,29.9691991786448" />
                  <mssgle:CubicBezierSegment
                    Point1="163.5,29.9691991786448"
                    Point2="167.5,29.9691991786448"
                    Point3="167.5,33.9691991786448" />
                  <mssgle:LineSegment
                    End="167.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="22.96826171875,34.9691991786448,121.5634765625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[OLE DB Source Output2]"
          TopLeft="590,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-9.16666666666663,60"
              Start="0,0"
              End="-9.16666666666663,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5903271692745" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.5903271692745"
                    Point2="0,35.5903271692745"
                    Point3="-4,35.5903271692745" />
                  <mssgle:LineSegment
                    End="-5.16666666666663,35.5903271692745" />
                  <mssgle:CubicBezierSegment
                    Point1="-5.16666666666663,35.5903271692745"
                    Point2="-9.16666666666663,35.5903271692745"
                    Point3="-9.16666666666663,39.5903271692745" />
                  <mssgle:LineSegment
                    End="-9.16666666666663,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-20.0369270833333,40.5903271692745,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="150,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Check for Sol 2"
          TopLeft="484,515.5" />
        <NodeLayout
          Size="149,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 1"
          TopLeft="271.5,413.5" />
        <NodeLayout
          Size="149,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Ignore as sol 2"
          TopLeft="267.5,617.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output1]"
          TopLeft="535.333333333333,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-193.333333333333,60"
              Start="0,0"
              End="-193.333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3799472295515" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3799472295515"
                    Point2="0,24.3799472295515"
                    Point3="-4,24.3799472295515" />
                  <mssgle:LineSegment
                    End="-189.333333333333,24.3799472295515" />
                  <mssgle:CubicBezierSegment
                    Point1="-189.333333333333,24.3799472295515"
                    Point2="-193.333333333333,24.3799472295515"
                    Point3="-193.333333333333,28.3799472295515" />
                  <mssgle:LineSegment
                    End="-193.333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-187.165924479167,29.3799472295515,180.998515625,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[No sol found]"
          TopLeft="582.666666666667,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-23.6666666666666,60"
              Start="0,0"
              End="-23.6666666666666,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3799472295515" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3799472295515"
                    Point2="0,24.3799472295515"
                    Point3="-4,24.3799472295515" />
                  <mssgle:LineSegment
                    End="-19.6666666666666,24.3799472295515" />
                  <mssgle:CubicBezierSegment
                    Point1="-19.6666666666666,24.3799472295515"
                    Point2="-23.6666666666666,24.3799472295515"
                    Point3="-23.6666666666666,28.3799472295515" />
                  <mssgle:LineSegment
                    End="-23.6666666666666,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-60.2650716145833,29.3799472295515,96.8634765625,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output2]"
          TopLeft="533,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-206,60"
              Start="0,0"
              End="-206,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3478260869565" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3478260869565"
                    Point2="0,24.3478260869565"
                    Point3="-4,24.3478260869565" />
                  <mssgle:LineSegment
                    End="-202,24.3478260869565" />
                  <mssgle:CubicBezierSegment
                    Point1="-202,24.3478260869565"
                    Point2="-206,24.3478260869565"
                    Point3="-206,28.3478260869565" />
                  <mssgle:LineSegment
                    End="-206,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-173.61390625,29.3478260869565,141.2278125,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[TemplateTransformOutput]"
          TopLeft="327,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,18.25,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Case 11]"
          TopLeft="585,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26,60"
              Start="0,0"
              End="-26,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3478260869565" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3478260869565"
                    Point2="0,24.3478260869565"
                    Point3="-4,24.3478260869565" />
                  <mssgle:LineSegment
                    End="-22,24.3478260869565" />
                  <mssgle:CubicBezierSegment
                    Point1="-22,24.3478260869565"
                    Point2="-26,24.3478260869565"
                    Point3="-26,28.3478260869565" />
                  <mssgle:LineSegment
                    End="-26,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.5042578125,29.3478260869565,71.008515625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="147,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink"
          TopLeft="272.5,311.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Conditional Split Default Output3]"
          TopLeft="322.333333333333,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="23.6666666666667,60"
              Start="0,0"
              End="23.6666666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3799472295514" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3799472295514"
                    Point2="0,24.3799472295514"
                    Point3="4,24.3799472295514" />
                  <mssgle:LineSegment
                    End="19.6666666666667,24.3799472295514" />
                  <mssgle:CubicBezierSegment
                    Point1="19.6666666666667,24.3799472295514"
                    Point2="23.6666666666667,24.3799472295514"
                    Point3="23.6666666666667,28.3799472295514" />
                  <mssgle:LineSegment
                    End="23.6666666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-78.6659244791666,29.3799472295514,180.998515625,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Derived Column Output1]"
          TopLeft="346,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.45359375,21.4658203125,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="156,42"
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Add permalink 1"
          TopLeft="481,413.5" />
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Merge Join Output1]"
          TopLeft="559,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.45359375,21.4658203125,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive.Paths[Derived Column Output2]"
          TopLeft="559,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.45359375,21.4658203125,30.9071875,9.568359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Insert Action Record">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Contacts From SQL">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Contacts">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Iterate Offices\Sequence Container\Search Normalised Contacts and Archive\Solicitors in use from Listings">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>